
&НаКлиенте
Перем СоответсвияВывода, СоответствиеМетаданных;

#Область ОБРАБОТЧИКИ_СОБЫТИЙ_ЭЛЕМЕНТОВ_ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДобавитьПодчиненныйЭлементКоллекции();
	
	КлючОбработки        = РеквизитФормыВЗначение("Объект").Метаданные().ПолноеИмя();
	
	// Загрузим сохраненное дерево запросов.
	ПутьКФайлуЗапросов = ХранилищеОбщихНастроек.Загрузить(КлючОбработки, "ПутьКФайлуЗапросов", ПутьКФайлуЗапросов);
	
	Элементы.ГруппаОбработчики.Доступность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ПустаяСтрока(ПутьКФайлуЗапросов) Тогда 
		ЗагрузитьЗапросы();
	КонецЕсли;
	
	СоответсвияВывода = Новый Соответствие;
	СоответствиеМетаданных = Новый Соответствие;
	
	НастройкаАвтосохранения();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПередатьПараметрыНастроекАвтоСохранения" Тогда 
		Объект.ИнтервалАвтосохранения 		= Параметр.ИнтервалАвтосохранения;
		Объект.ИспользоватьАвтосохранение 	= Параметр.ИспользоватьАвтосохранение;
		НастройкаАвтосохранения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы И Модифицированность Тогда
		
		ТекстПредупреждения = "Запрос был изменен, данные не сохранены!!!";
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	Если Модифицированность
		И Вопрос("Сохранить запросы в файл?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да, "Внимание!") = КодВозвратаДиалога.Да Тогда 
		
		СохранитьЗапросы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
		ПриЗакрытииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОБРАБОТЧИКИ_ЭЛЕМЕНТОВ_ФОРМЫ

&НаКлиенте
Процедура РезультатЗапросаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.РезультатЗапроса.ТекущиеДанные;
	ТекущийЗапрос = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено И Не ТекущийЗапрос = Неопределено Тогда 
		ОткрытьЗначение(ТекущиеДанные[СтрЗаменить(Поле.Имя, "РезультатЗапроса", "")]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовПриАктивизацииСтроки(Элемент)
	
	НастроитьЭлементы(Элемент);
	
КонецПроцедуры 

&НаКлиенте
Процедура ДеревоЗапросовПараметрыЗапросаПриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.СпособУстановки = "Значение" Тогда 
		
		ТекущийТипЗначения = пкм_УстановитьПараметры(ТекущиеДанные.ИмяПараметра); 		
		
		Если Не ТекущийТипЗначения = Неопределено
			И Не ТекущийТипЗначения.СодержитТип(Тип("СписокЗначений")) Тогда 
			ТекущиеДанные.ТипЗначения = ТекущийТипЗначения;
		КонецЕсли;
		
	ИначеЕсли ТекущиеДанные.СпособУстановки = "Выражение" Тогда 
		ТекущиеДанные.ТипЗначения = Новый ОписаниеТипов("Строка");
	ИначеЕсли ТекущиеДанные.СпособУстановки = "Список" Тогда 
		ТекущиеДанные.ТипЗначения = Новый ОписаниеТипов("СписокЗначений");
	КонецЕсли;
	
	Элементы.ПараметрыЗапросаЗначениеПараметра.ОграничениеТипа = ТекущиеДанные.ТипЗначения;
	
	ЭтоДатаИлиЧисло = (ТекущиеДанные.ТипЗначения.СодержитТип(Тип("Дата"))
	Или ТекущиеДанные.ТипЗначения.СодержитТип(Тип("Число")));
	
	
	ЭтоБулевоИлиСтрока = (ТекущиеДанные.ТипЗначения.СодержитТип(Тип("Булево"))
	Или ТекущиеДанные.ТипЗначения.СодержитТип(Тип("Строка")));
	
	
	ЭтоСписокЗначений = ТекущиеДанные.ТипЗначения.СодержитТип(Тип("СписокЗначений"));
	
	УстановитьСвойствоЭлементаФормы("ПараметрыЗапросаЗначениеПараметра", "КнопкаРегулирования", ЭтоДатаИлиЧисло И Не ЭтоСписокЗначений);
	УстановитьСвойствоЭлементаФормы("ПараметрыЗапросаЗначениеПараметра", "КнопкаОткрытия",      Не ЭтоДатаИлиЧисло И Не ЭтоБулевоИлиСтрока И Не ЭтоСписокЗначений);
	
КонецПроцедуры

&НаСервере
Функция  пкм_УстановитьПараметры(ИмяПараметра)
	
	ТекущийТипЗначения = Неопределено;
	
	ТекущаяСтрока = Элементы.ДеревоЗапросов.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено Тогда Возврат ТекущийТипЗначения; КонецЕсли;
	
	ЭлементКоллекции = ДеревоЗапросов.НайтиПоИдентификатору(ТекущаяСтрока);
	_ТекстЗапроса = ЭлементКоллекции.ТекстЗапроса;
	
	Попытка
		Запрос = Новый Запрос(_ТекстЗапроса);  	
		ОписаниеПараметров = Запрос.НайтиПараметры(); 		
	Исключение
		Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), СтатусСообщения.Важное); 
		Возврат ТекущийТипЗначения;
	КонецПопытки;
	
	НайденаяСтрока = ОписаниеПараметров.Найти(ИмяПараметра);
	
	Если НайденаяСтрока <> Неопределено Тогда
		ТекущийТипЗначения = НайденаяСтрока.ТипЗначения;
	КонецЕсли;
	
	Возврат ТекущийТипЗначения;
	
КонецФункции   

&НаКлиенте
Процедура ПараметрыЗапросаСпособУстановкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоЗапросовПараметрыЗапроса.ТекущиеДанные;
	ТекущиеДанные.ЗначениеПараметра = Неопределено;
	
	ДеревоЗапросовПараметрыЗапросаПриАктивизацииЯчейки(Элементы.ДеревоЗапросовПараметрыЗапроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаЗначениеПараметраПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если Не ТекущиеДанные.ЗначениеПараметра = Неопределено Тогда 
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(ТекущиеДанные.ЗначениеПараметра));
		ТекущиеДанные.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
		
		ДеревоЗапросовПараметрыЗапросаПриАктивизацииЯчейки(Элемент.Родитель);
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.ИмяПараметра) Тогда 
			ТекущиеДанные.ИмяПараметра = ПолучитьИмяМетаданногоПоТипу(ТипЗнч(ТекущиеДанные.ЗначениеПараметра));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаЗначениеПараметраНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если ТекущиеДанные.ТипЗначения.СодержитТип(Тип("Строка")) Тогда 
		ВвестиСтроку(ТекущиеДанные.ЗначениеПараметра, "Введите текст" + ?(ТекущиеДанные.СпособУстановки = "Выражение", " выражения", "") + "!",, Истина);
	ИначеЕсли ТекущиеДанные.ТипЗначения.СодержитТип(Тип("СписокЗначений")) Тогда 
		Если ТекущиеДанные.ЗначениеПараметра = Неопределено Тогда
			ТекущийТипЗначения = пкм_УстановитьПараметры(ТекущиеДанные.ИмяПараметра);
			
			ЗначениеПараметра = Новый СписокЗначений;
			Если ТекущийТипЗначения <> Неопределено Тогда
				ЗначениеПараметра.ТипЗначения = ТекущийТипЗначения;
			КонецЕсли;
			
			ТекущиеДанные.ЗначениеПараметра = ЗначениеПараметра;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПриИзменении(Элемент)
	
	ИндексыДляПоиска.Очистить();
	
	Если ЗначениеЗаполнено(Поиск) Тогда
		
		ИдентификаторСтроки = 0;
		ПоискТекста(Поиск, ИдентификаторСтроки);  
		
		Элементы.ДеревоЗапросов.ТекущаяСтрока = ИдентификаторСтроки;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТип(Команда)
	
	ТекущиеДанные = Элементы.ДеревоЗапросовПараметрыЗапроса.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		МассивТипов = Новый Массив;
		ТекущиеДанные.ЗначениеПараметра = Неопределено;
		ТекущиеДанные.ТипЗначения 		= Новый ОписаниеТипов(МассивТипов);
		Модифицированность = Истина;
		ДеревоЗапросовПараметрыЗапросаПриАктивизацииЯчейки(Элементы.ДеревоЗапросовПараметрыЗапроса);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОБРАБОТЧИКИ_КОМАНД

&НаКлиенте
Процедура ВыполнитьЗапрос(Команда)
	
	ИмяКоманды = Команда.Имя;
	Элементы["РезультатЗапроса" + ИмяКоманды].Пометка = Истина;
	
	ТекущиеДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		
		Если ТекущиеДанные.ЯвляетсяЗапросом Тогда
			Запрос_Текст = Элементы.ДеревоЗапросовТекстЗапроса.ВыделенныйТекст;
			Если СтрДлина(Запрос_Текст) <> 0 Тогда
				Запрос_Текст = Запрос_Текст;
			Иначе
				Запрос_Текст = ТекущиеДанные.ТекстЗапроса;
			КонецЕсли; 			
		Иначе
			Запрос_Текст = ТекущиеДанные.ТекстЗапроса;
		КонецЕсли;
		
		ВыполнитьТекстЗапроса(Запрос_Текст, ТекущиеДанные.ПараметрыЗапроса, ТекущиеДанные.ЯвляетсяЗапросом);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НовоеДеревоЗапросов(Команда)
	
	ДеревоЗапросов.ПолучитьЭлементы().Очистить();
	РезультатЗапроса.ПолучитьЭлементы().Очистить();
	
	МассивЗапросовПакета    = Новый ФиксированныйМассив(Новый Массив);
	ПутьКФайлуЗапросов      = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗапросыИзФайла(Команда)
	
	УправлениеРасширениемРаботыСФайлами();
	
	ВызватьДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьЗапросыВФайл(Команда)
	
	УправлениеРасширениемРаботыСФайлами();
	
	Если ПустаяСтрока(ПутьКФайлуЗапросов) Тогда 
		ВызватьДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Иначе
		СохранитьЗапросы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьЗапросыВФайлКак(Команда)
	
	ВызватьДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроекАвтоСохранения(Команда)
	
	стрПарамтр = Новый Структура;
	стрПарамтр.Вставить("ИнтервалАвтосохранения", Объект.ИнтервалАвтосохранения);
	стрПарамтр.Вставить("ИспользоватьАвтосохранение", Объект.ИспользоватьАвтосохранение);
	
	ОткрытьФорму("Обработка.КонсольЗапросов.Форма.Настройки", стрПарамтр);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонструкторЗапроса(Команда)
	
	ТекущиеДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	ТекстЗапросаВФорме = СокрЛП(ТекущиеДанные.ТекстЗапроса);
	
	Если ПустаяСтрока(ТекстЗапросаВФорме) Тогда 
		КонструкторЗапроса = Новый КонструкторЗапроса();
	Иначе
		КонструкторЗапроса = Новый КонструкторЗапроса(ТекстЗапросаВФорме);
	КонецЕсли;	
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияКонструктораЗапроса", ЭтотОбъект);
	КонструкторЗапроса.Показать(Оповещение);
	
КонецПроцедуры 

&НаКлиенте
Процедура ВставитьОператорыЗапроса(Команда)
	
	ТекущийЗапрос = Элементы.ДеревоЗапросов.ТекущиеДанные;
	
	ОператорыЗапроса =
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	 КАК 
	|ГДЕ
	|	
	|
	|СГРУППИРОВАТЬ ПО
	|	
	|
	|УПОРЯДОЧИТЬ ПО
	|	
	|ИТОГИ ПО
	|	";
	
	Если ТекущийЗапрос.ТекстЗапроса = ОператорыЗапроса Тогда 
		Возврат;
	ИначеЕсли Не ПустаяСтрока(ТекущийЗапрос.ТекстЗапроса)
		И Вопрос("Действие приведет к очистке текущего текста запроса! Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет, "Внимание!") = КодВозвратаДиалога.Нет Тогда 
		
		Возврат;
	КонецЕсли;
	
	ТекущийЗапрос.ТекстЗапроса = ОператорыЗапроса;
	
КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьТекстВКод(Команда)
	
	ТекущийЗапрос = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекущийЗапрос = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ИмяЗапроса = ?(ПустаяСтрока(ТекущийЗапрос.Запрос), "Запрос", ТекущийЗапрос.Запрос);
	ВвестиСтроку(ИмяЗапроса, "Введите имя запроса!");
	
	КодЗапроса = "";
	Для НомерСтроки = 1 По СтрЧислоСтрок(ТекущийЗапрос.ТекстЗапроса) Цикл
		КодЗапроса = КодЗапроса +
		?(НомерСтроки = 1, "", Символы.ПС + "|") +
		СтрПолучитьСтроку(ТекущийЗапрос.ТекстЗапроса, НомерСтроки);
	КонецЦикла;
	
	КодЗапроса = СтрЗаменить(КодЗапроса, Символ(34), Символ(34) + Символ(34));
	КодЗапроса = "Запрос = Новый Запрос(" + Символы.ПС + """" + КодЗапроса + """);" + Символы.ПС;
	
	Если Найти(ВРег(ТекущийЗапрос.ТекстЗапроса), "ПОМЕСТИТЬ") > 0 Тогда 
		КодЗапроса = КодЗапроса + Символы.ПС + "Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;";
	КонецЕсли;
	
	Для Каждого Параметр Из ТекущийЗапрос.ПараметрыЗапроса Цикл 
		КодЗапроса = КодЗапроса + Символы.ПС +
		"Запрос.УстановитьПараметр(""" + Параметр.ИмяПараметра + """, <" + Параметр.ИмяПараметра + ">);" +
		" // " + Параметр.ТипЗначения + ".";
	КонецЦикла;
	
	КодЗапроса = КодЗапроса + Символы.ПС + Символы.ПС + "РезультатЗапроса = Запрос.Выполнить();";
	КодЗапроса = КодЗапроса + Символы.ПС + Символы.ПС + "ВыборкаДетальныеЗаписи = Результат.Выбрать();";
	
	КодЗапроса = КодЗапроса + Символы.ПС + "Пока ВыборкаДетальныеЗаписи.Следующий() Цикл";
	КодЗапроса = КодЗапроса + Символы.ПС + "// Вставить обработку выборки ВыборкаДетальныеЗаписи";
	КодЗапроса = КодЗапроса + Символы.ПС + "КонецЦикла;";
	
	Если ВвестиСтроку(КодЗапроса, "Код запроса...",, Истина) Тогда 
		ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		ДиалогВыбораКаталога.Заголовок  = "Выберите каталог сохранения!";
		
		Если ДиалогВыбораКаталога.Выбрать() Тогда 
			СохранитьКодЗапроса(ДиалогВыбораКаталога.ПолноеИмяФайла + ИмяЗапроса + ".txt", КодЗапроса);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомментарий(Команда)
	
	Перем ПерваяСтрока, ПерваяКолонка, ПоследняяСтрока, ПоследняяКолонка;
	
	Элемент = Элементы.ДеревоЗапросовТекстЗапроса;
	Элемент.ПолучитьГраницыВыделения(ПерваяСтрока, ПерваяКолонка, ПоследняяСтрока, ПоследняяКолонка);
	
	ТекущиеДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;  
	
	ТекстДоИзменения 	= ТекущиеДанные.ТекстЗапроса;
	КоличествоСтрок 	= СтрЧислоСтрок(ТекстДоИзменения);
	ВыделенныйФрагмент = "";
	ДлинаПоследнейСтроки = 0;
	
	Если ПоследняяКолонка = 1 Тогда 
		ПоследняяСтрока = ПоследняяСтрока - 1;
	КонецЕсли;
	Если ПерваяСтрока >= ПоследняяСтрока И ПоследняяКолонка = 1 Тогда 
		ПоследняяКолонка = СтрДлина(СтрПолучитьСтроку(ТекстДоИзменения, ПерваяСтрока));
		ПоследняяСтрока = ПерваяСтрока;
	КонецЕсли;
	
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		Фрагмент = СтрПолучитьСтроку(ТекстДоИзменения, НомерСтроки);
		Если НомерСтроки >= ПерваяСтрока И НомерСтроки <= ПоследняяСтрока Тогда
			Если НомерСтроки = ПерваяСтрока Тогда 
				ВыделенныйФрагмент = ВыделенныйФрагмент + "//" + Фрагмент;
			Иначе
				ВыделенныйФрагмент = ВыделенныйФрагмент + Символы.ПС + "//" +Фрагмент;
			КонецЕсли;
			Если НомерСтроки = ПоследняяСтрока Тогда 
				ДлинаПоследнейСтроки = СтрДлина(Фрагмент) + 3;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПоследняяКолонка = 1 Тогда 
		ПоследняяСтрока = ПоследняяСтрока + 1;
		ДлинаПоследнейСтроки = 1;
		ВыделенныйФрагмент =  ВыделенныйФрагмент + Символы.ПС;
	КонецЕсли;
	
	Элемент.УстановитьГраницыВыделения(ПерваяСтрока, 1, ПоследняяСтрока, ДлинаПоследнейСтроки);
	Элемент.ВыделенныйТекст = ВыделенныйФрагмент;
	Элемент.УстановитьГраницыВыделения(ПерваяСтрока, 1, ПоследняяСтрока, ДлинаПоследнейСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьКомментарий(Команда)
	
	Перем ПерваяСтрока, ПерваяКолонка, ПоследняяСтрока, ПоследняяКолонка;
	
	Элемент = Элементы.ДеревоЗапросовТекстЗапроса;
	Элемент.ПолучитьГраницыВыделения(ПерваяСтрока, ПерваяКолонка, ПоследняяСтрока, ПоследняяКолонка);
	
	ТекущиеДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;  
	
	ТекстДоИзменения 	= ТекущиеДанные.ТекстЗапроса;
	КоличествоСтрок = СтрЧислоСтрок(ТекстДоИзменения);
	ВыделенныйФрагмент = "";
	ДлинаПоследнейСтроки = ПоследняяКолонка;
	
	Если ПоследняяКолонка = 1 Тогда 
		ПоследняяСтрока = ПоследняяСтрока - 1;
	КонецЕсли;
	Если ПерваяСтрока >= ПоследняяСтрока И ПоследняяКолонка = 1 Тогда 
		ПоследняяКолонка = СтрДлина(СтрПолучитьСтроку(ТекстДоИзменения, ПерваяСтрока));
		ПоследняяСтрока = ПерваяСтрока;
	КонецЕсли;
	
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		Фрагмент = СтрПолучитьСтроку(ТекстДоИзменения, НомерСтроки);
		Если НомерСтроки >= ПерваяСтрока И НомерСтроки <= ПоследняяСтрока Тогда
			Если СтрНачинаетсяС(СокрЛ(Фрагмент), "//") Тогда
				Позиция = СтрНайти(Фрагмент, "//");
				Фрагмент = Лев(Фрагмент, Позиция - 1) + Сред(Фрагмент, Позиция + 2);
			КонецЕсли;
			Если НомерСтроки = ПерваяСтрока Тогда 
				ВыделенныйФрагмент = ВыделенныйФрагмент + Фрагмент;
			Иначе
				ВыделенныйФрагмент = ВыделенныйФрагмент + Символы.ПС + Фрагмент;
			КонецЕсли;
			Если НомерСтроки = ПоследняяСтрока Тогда 
				ДлинаПоследнейСтроки = СтрДлина(Фрагмент) + 3;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПоследняяКолонка = 1 Тогда 
		ПоследняяСтрока = ПоследняяСтрока + 1;
		ДлинаПоследнейСтроки = 1;
		ВыделенныйФрагмент =  ВыделенныйФрагмент + Символы.ПС;
	КонецЕсли;
	
	Элемент.УстановитьГраницыВыделения(ПерваяСтрока, 1, ПоследняяСтрока, ДлинаПоследнейСтроки);
	Элемент.ВыделенныйТекст = ВыделенныйФрагмент;
	Элемент.УстановитьГраницыВыделения(ПерваяСтрока, 1, ПоследняяСтрока, ДлинаПоследнейСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПеренос(Команда)
	
	ТекущийЗапрос = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекущийЗапрос = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса      = ТекущийЗапрос.ТекстЗапроса;
	КоличествоСтрок   = СтрЧислоСтрок(ТекстЗапроса);
	НовыйТекстЗапроса = "";
	Для НомерСтроки = 1 По КоличествоСтрок Цикл 
		ТекущаяСтрока     = СтрПолучитьСтроку(ТекстЗапроса, НомерСтроки);
		НовыйТекстЗапроса = НовыйТекстЗапроса + ?(Лев(ТекущаяСтрока, 1) = "|", "", "|") + ТекущаяСтрока + ?(НомерСтроки = КоличествоСтрок, "", Символы.ПС);
	КонецЦикла;
	ТекущийЗапрос.ТекстЗапроса = НовыйТекстЗапроса;
	
КонецПроцедуры 

&НаКлиенте
Процедура УбратьПеренос(Команда)
	
	ТекущиеДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ТекстЗапроса = СтрЗаменить(ТекущиеДанные.ТекстЗапроса, "|", "");
	
КонецПроцедуры 

&НаКлиенте
Процедура СписокПредопределенныхЗначенийКонфигурации(Команда)
	ОткрытьФорму("Обработка.КонсольЗапросов.Форма.ПредопределенныеЗначения");
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗаполнитьИзЗапроса(Команда)
	НайтиПараметрыЗапроса();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьРезультат(Команда)
	
	Если РезультатЗапроса.ПолучитьЭлементы().Количество() = 0 Тогда Возврат КонецЕсли;
	
	ИндексФильтра 	= 0;
	ИмяФайла 		= "";  	
	сткРезультат 	= ПолучитьДиалогОткрытияФайла(ИмяФайла, ИндексФильтра);
	
	Если НЕ ЗначениеЗаполнено(сткРезультат) Тогда	
		Возврат	
	КонецЕсли;
	
	Попытка 		
		ТабДок = СохранитьРезультатСервер();
		
		ТабДок.Записать(сткРезультат.ПолноеИмяФайла, сткРезультат.ТипФайла);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВременныеТаблицы(Команда)
	
	Если НЕ ЗначениеЗаполнено(АдресВременныхТаблиц) Тогда Возврат; КонецЕсли;
	
	стрПарамтр = Новый Структура;
	стрПарамтр.Вставить("АдресВременныхТаблиц", АдресВременныхТаблиц);
	
	ОткрытьФорму("Обработка.КонсольЗапросов.Форма.ФормаСпискаВременныхТаблиц", стрПарамтр);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВременныеТаблицы(Команда)
	Если ЗначениеЗаполнено(АдресВременныхТаблиц) 
		И Вопрос("Удалить все ранее созданные временные таблицы?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да, "Внимание!") = КодВозвратаДиалога.Да Тогда
		АдресВременныхТаблиц = "";
		НастроитьЭлементы(Элементы.ДеревоЗапросов);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НайтиСледующий(Команда)
	
	_КоличествоНайденыхСтрок = ИндексыДляПоиска.Количество();
	
	Если _КоличествоНайденыхСтрок <= 1 Тогда Возврат КонецЕсли;
	
	Если _КоличествоНайденыхСтрок = СтрокаДляПозиционирования + 1 Тогда
		СледующаяСтрока = 0;
	Иначе
		СледующаяСтрока = СтрокаДляПозиционирования + 1;
	КонецЕсли;
	
	Элементы.ДеревоЗапросов.ТекущаяСтрока = ИндексыДляПоиска[СледующаяСтрока].Значение;
	СтрокаДляПозиционирования = СледующаяСтрока;  	
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПредыдущий(Команда)
	
	_КоличествоНайденыхСтрок = ИндексыДляПоиска.Количество();
	
	Если _КоличествоНайденыхСтрок <= 1 Тогда Возврат КонецЕсли;
	
	Если СтрокаДляПозиционирования = 0 Тогда
		СледующаяСтрока = _КоличествоНайденыхСтрок;
	Иначе
		СледующаяСтрока = СтрокаДляПозиционирования;
	КонецЕсли;
	
	СтрокаДляПозиционирования = СледующаяСтрока - 1;
	Элементы.ДеревоЗапросов.ТекущаяСтрока = ИндексыДляПоиска[СтрокаДляПозиционирования].Значение; 	
	
КонецПроцедуры

#КонецОбласти

#Область ОБЩИЕ_ПРОЦЕДУРЫ_И_ФУНКЦИИ

&НаСервере
Процедура ДобавитьПодчиненныйЭлементКоллекции()
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПустоеЗначение", Новый ОписаниеТипов("Строка"), "РезультатЗапроса"));
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	ПодчиненныйЭлемент = Элементы.Добавить("РезультатЗапросаПустоеЗначение", Тип("ПолеФормы"), Элементы.РезультатЗапроса);
	ПодчиненныйЭлемент.ПутьКДанным        = "РезультатЗапроса.ПустоеЗначение";
	ПодчиненныйЭлемент.Вид                = ВидПоляФормы.ПолеВвода;
	ПодчиненныйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗапросы()
	
	ФайлЗапросов = Новый Файл(ПутьКФайлуЗапросов);
	
	ФайлЗапросов.НачатьПроверкуЭтоФайл(Новый ОписаниеОповещения("ПослеПроверкиФайла", ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиФайла(Результат, ДопПараметры) Экспорт
	
	Если Не Результат Тогда 
		Сообщить("Файл не существует!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Попытка
		
		АдресФайл = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПутьКФайлуЗапросов));  		
		ПреобразоватьДерево();
		
	Исключение
		Сообщить("Не соответствие формата исходного файла!", СтатусСообщения.Важное);
	КонецПопытки;
	
	Модифицированность = Ложь;
	
	
КонецПроцедуры	

&НаСервере
Процедура ПреобразоватьДерево()
	
	ПутьКФайлу 		= ПолучитьИмяВременногоФайла("sel");
	БинарныеДанные 	= ПолучитьИзВременногоХранилища(АдресФайл); 
	БинарныеДанные.Записать(ПутьКФайлу);
	
	СтароеДерево = ЗначениеИзФайла(ПутьКФайлу);
	
	НовоеДерево = РеквизитФормыВЗначение("ДеревоЗапросов");
	НовоеДерево.Строки.Очистить();
	
	// Костыль для открытия старых файлов
	булТекстОбработчика = СтароеДерево.Колонки.Найти("ТекстОбработчика") <> Неопределено;
	
	ОбойтиСтроки(СтароеДерево, НовоеДерево, булТекстОбработчика);
	
	ЗначениеВДанныеФормы(НовоеДерево, ДеревоЗапросов);
	
КонецПроцедуры

&НаСервере
Процедура ОбойтиСтроки(СтароеДерево, НовоеДерево, булТекстОбработчика)	
	
	Для Каждого Стр Из СтароеДерево.Строки Цикл
		НовСтрока = НовоеДерево.Строки.Добавить();
		НовСтрока.Запрос 			= Стр.Запрос;
		НовСтрока.ТекстЗапроса 		= Стр.ТекстЗапроса;
		НовСтрока.ПараметрыЗапроса 	= Стр.ПараметрыЗапроса;
		НовСтрока.ЯвляетсяЗапросом  = Стр.ЯвляетсяЗапросом;
		НовСтрока.ТекстОбработчика  = ?(булТекстОбработчика, Стр.ТекстОбработчика, ""); 
		
		Если Стр.Строки.Количество() > 0 Тогда
			ОбойтиСтроки(Стр, НовСтрока, булТекстОбработчика)
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияКонструктораЗапроса(ТекстЗапросаВФорме, ИндексТекущегоЗапроса) Экспорт
	
	Если ТекстЗапросаВФорме <> Неопределено Тогда
		Попытка
			ТекущиеДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;
			ТекущиеДанные.ТекстЗапроса = ТекстЗапросаВФорме;
			Модифицированность = Истина;
		Исключение
			ТекущиеДанные.ТекстЗапроса = "";
			Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), СтатусСообщения.Важное);
		КонецПопытки;      		
		НастроитьЭлементы(Элементы.ДеревоЗапросов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьДиалогВыбораФайла(Режим)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогВыбораФайла.Заголовок  = "Выберите файл со списком запросов!";
	ДиалогВыбораФайла.Фильтр     = "Файлы запросов (*.sel)|*.sel|Все файлы (*.*)|*.*";
	ДиалогВыбораФайла.Расширение = "sel";
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ВызватьДиалогВыбораФайлаПродолжение", ЭтотОбъект, Новый Структура("Режим", Режим)));
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьДиалогВыбораФайлаПродолжение(масРезультат, Параметры) Экспорт
	Если масРезультат = Неопределено ИЛИ масРезультат.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;
	ПутьКФайлуЗапросов = масРезультат[0];
	Если Параметры.Режим = РежимДиалогаВыбораФайла.Сохранение Тогда
		СохранитьЗапросы();
	ИначеЕсли Параметры.Режим = РежимДиалогаВыбораФайла.Открытие Тогда
		ЗагрузитьЗапросы();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УправлениеРасширениемРаботыСФайлами()
	
	#Если ВебКлиент Тогда 
		Если Не ПодключитьРасширениеРаботыСФайлами() Тогда
			УстановитьРасширениеРаботыСфайлами();
			Предупреждение(НСтр("ru = 'Расширение работы с файлами успешно установлено'"));
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьЗапросы()
	
	Если ПустаяСтрока(ПутьКФайлуЗапросов) Тогда 
		Сообщить("Не указан путь и имя файла!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	ПолучитьФайл(СформироватьФайлНаСервере(), ПутьКФайлуЗапросов, Ложь);  
	
	Модифицированность = Ложь;
	
КонецПроцедуры 

&НаСервере
Функция СформироватьФайлНаСервере()
	
	// Создать объект записи XML и открыть файл
	ИмяФайлаЗапроса = ПолучитьИмяВременногоФайла("sel");
	
	ЗначениеВФайл(ИмяФайлаЗапроса, ДанныеФормыВЗначение(ДеревоЗапросов, Тип("ДеревоЗначений")));
	
	АдресФайл = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайлаЗапроса));
	УдалитьФайлы(ИмяФайлаЗапроса);
	Возврат АдресФайл;
	
КонецФункции	

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	// Сохраним путь к файлу запросов в хранилище настроек.
	ХранилищеОбщихНастроек.Сохранить(КлючОбработки, "ПутьКФайлуЗапросов", ПутьКФайлуЗапросов);
	
КонецПроцедуры 

&НаКлиенте
Процедура НастроитьЭлементы(Элемент)
	
	ЕстьВременныеТаблицы = ЗначениеЗаполнено(АдресВременныхТаблиц);
	
	УстановитьСвойствоЭлементаФормы("ОчиститьВременныеТаблицы", "Доступность",  ЕстьВременныеТаблицы);
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ПромежуточныеЗапросы = Элемент.ТекущиеДанные.ЯвляетсяЗапросом;
		УстановитьСвойствоЭлементаФормы("ОткрытьВременныеТаблицы", "Доступность",  ПромежуточныеЗапросы);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьТекстЗапроса(Запрос_Текст, Запрос_Параметры, ВременныеТаблицы)
	
	Если ЗначениеЗаполнено(Запрос_Текст) Тогда
		
		Если ПустаяСтрока(Запрос_Текст) Тогда 
			СообщитьПользователю = Новый СообщениеПользователю;
			СообщитьПользователю.Текст       = "Отсутствует текст запроса!";
			СообщитьПользователю.Поле        = "ДеревоЗапросовТекстЗапроса";
			СообщитьПользователю.ПутьКДанным = "Элементы.ДеревоЗапросов.ТекущиеДанные.ТекстЗапроса";
			СообщитьПользователю.Сообщить();
			
			Возврат;
		КонецЕсли;
		
		ПоказатьРезультат(Запрос_Текст, Запрос_Параметры, ВременныеТаблицы, СоответсвияВывода, СоответствиеМетаданных);
		
		ВремяОкончанияВывода = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		Если ЗначениеЗаполнено(ВремяОкончанияВывода) И ЗначениеЗаполнено(ВремяОкончанияВыполнения) Тогда 
			ВремяВывода = "Время вывода : " + Формат((ВремяОкончанияВывода - ВремяОкончанияВыполнения) / 1000, "ЧДЦ=3; ЧРД=.; ЧН=0; ЧГ=");
		КонецЕсли;  		
		
		ВыполнитьЗапрос = Элементы.РезультатЗапросаВыполнитьЗапрос.Пометка;
		
		УстановитьСвойствоЭлементаФормы(
		"РезультатЗапроса",
		"Отображение",
		?(Найти(ВРег(Запрос_Текст), "ИТОГИ") > 0,
		ОтображениеТаблицы.Дерево,
		ОтображениеТаблицы.Список));
		
		УстановитьСвойствоЭлементаФормы("ВремяВыполнения", "Заголовок", ВремяВыполнения);
		УстановитьСвойствоЭлементаФормы("ВремяВыполнения", "Видимость", Не ПустаяСтрока(ВремяВыполнения));
		
		УстановитьСвойствоЭлементаФормы("ВремяВывода", "Заголовок", ВремяВывода);
		УстановитьСвойствоЭлементаФормы("ВремяВывода", "Видимость", Не ПустаяСтрока(ВремяВывода));
		
		УстановитьСвойствоЭлементаФормы("ВремяВыполненияВТ", "Заголовок", ВремяВыполненияВТ);
		УстановитьСвойствоЭлементаФормы("ВремяВыполненияВТ", "Видимость", Не ПустаяСтрока(ВремяВыполненияВТ));
		
		УстановитьСвойствоЭлементаФормы("Комментарий", "Заголовок", "Количество строк результата: " + Формат(РезультатЗапроса.ПолучитьЭлементы().Количество(), "ЧЦ=15; ЧДЦ=0; ЧРГ=' '; ЧН=0"));
		УстановитьСвойствоЭлементаФормы("Комментарий", "Видимость", ВыполнитьЗапрос);
		
	Иначе
		Сообщить("Текст запроса пустой");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьРезультат(Знач ТекстЗапроса, Знач ПараметрыЗапроса, ВременныеТаблицы, Знач СоответсвияВывода, Знач СоответствиеМетаданных)
	
	Попытка
		
		ВремяВыполненияВТ = "";
		
		ВремяНачалаВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		Если ВременныеТаблицы Тогда
			МассивРезультатов = ПолучитьМассивРезультатовВременныеТаблицы(ТекстЗапроса, ПараметрыЗапроса);
		Иначе
			МассивРезультатов = ПолучитьМассивРезультатов(ТекстЗапроса, ПараметрыЗапроса);
		КонецЕсли;
		
		Если МассивРезультатов = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Иерархия = НаличиеИерархииВЗапросе(ТекстЗапроса);
		
		дзРезультатЗапроса = МассивРезультатов.Выгрузить(?(Иерархия, ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, ОбходРезультатаЗапроса.ПоГруппировкам));
		
		ДобавитьДанныеПоСоответсвиюВывода(дзРезультатЗапроса, СоответсвияВывода, СоответствиеМетаданных);
		
		ВремяОкончанияВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		Если ЗначениеЗаполнено(ВремяНачалаВыполнения) И ЗначениеЗаполнено(ВремяОкончанияВыполнения) Тогда 
			ВремяВыполнения = "Время выполнения: " + Формат((ВремяОкончанияВыполнения - ВремяНачалаВыполнения) / 1000, "ЧДЦ=3; ЧРД=.; ЧН=0; ЧГ=");
		КонецЕсли;
		
		ПодготовитьКоллекцию(дзРезультатЗапроса.Колонки);
		
		ЗначениеВРеквизитФормы(дзРезультатЗапроса, "РезультатЗапроса");
	Исключение
		Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), СтатусСообщения.Важное);
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДанныеПоСоответсвиюВывода(дзРезультатЗапроса, СоответсвияВывода, СоответствиеМетаданных)
	
	КоллекцияКолонок = дзРезультатЗапроса.Колонки;
	СоответсвияКолонок = Новый Соответствие;
	
	Для Каждого Колонка Из КоллекцияКолонок Цикл          
		_Соответсвие = СоответсвияВывода[Колонка.Имя];          
		Если _Соответсвие <> Неопределено Тогда
			_Индекс = КоллекцияКолонок.Индекс(Колонка);      
			Если _Соответсвие = "ГУИД ссылки" Тогда
				дзРезультатЗапроса.Колонки.Вставить(_Индекс + 1, Колонка.Имя + "ГУИД",  Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(150)), Колонка.Заголовок + " ГУИД");
				СоответсвияКолонок.Вставить(Колонка.Имя, "ГУИД");
			ИначеЕсли _Соответсвие = "Бинарное представление ссылки" Тогда
				дзРезультатЗапроса.Колонки.Вставить(_Индекс + 1, Колонка.Имя + "Бинарное", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(150)), Колонка.Заголовок + " Бинарное представление ссылки");				
				СоответсвияКолонок.Вставить(Колонка.Имя, "Бинарное");	
			ИначеЕсли _Соответсвие = "Бинарное представление ссылки (0х)" Тогда
				дзРезультатЗапроса.Колонки.Вставить(_Индекс + 1, Колонка.Имя + "Бинарное0", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(150)), Колонка.Заголовок + " Бинарное представление ссылки (0х)");				
				СоответсвияКолонок.Вставить(Колонка.Имя, "Бинарное0");	
			ИначеЕсли _Соответсвие = "Тип + ГУИД" Тогда
				дзРезультатЗапроса.Колонки.Вставить(_Индекс + 1, Колонка.Имя + "ТипГУИД", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(150)), Колонка.Заголовок + " Тип + ГУИД");	
				СоответсвияКолонок.Вставить(Колонка.Имя, "ТипГУИД");	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если СоответсвияКолонок.Количество() > 0 Тогда
		ОбходДерева_ДобавитьДанные(дзРезультатЗапроса.Строки, СоответсвияКолонок, СоответствиеМетаданных);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбходДерева_ДобавитьДанные(_Строки, СоответсвияКолонок, СоответствиеМетаданных)
	
	Для Каждого Строка из _Строки Цикл
		
		Для Каждого Соответсвие из СоответсвияКолонок Цикл
			
			Если Соответсвие.Значение = "ГУИД" Тогда
				Строка[Соответсвие.Ключ + Соответсвие.Значение] = XMLСтрока(Строка[Соответсвие.Ключ]);
			ИначеЕсли Соответсвие.Значение = "Бинарное" Тогда	
				Строка[Соответсвие.Ключ + Соответсвие.Значение] = ПолучитьБинарноеПредставлениеСсылки(Строка[Соответсвие.Ключ]);
			ИначеЕсли Соответсвие.Значение = "Бинарное0" Тогда
				Строка[Соответсвие.Ключ + Соответсвие.Значение] = "0x"+ПолучитьБинарноеПредставлениеСсылки(Строка[Соответсвие.Ключ]) + ",";
			ИначеЕсли Соответсвие.Значение = "ТипГУИД" Тогда
				
				ЗначениеСтроки = СоответствиеМетаданных[Соответсвие.Ключ];
				Если ЗначениеСтроки = Неопределено Тогда
					Мета = Метаданные.НайтиПоТипу(ТипЗнч(Строка[Соответсвие.Ключ]));
					Если Мета = Неопределено Тогда
						ЗначениеСтроки = "";
					Иначе
						ИмяМета = Мета.ПолноеИмя();
						ЗначениеСтроки = СтрЗаменить(ИмяМета, ".", "Ссылка.");
						СоответствиеМетаданных.Вставить(Соответсвие.Ключ, ЗначениеСтроки);
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ЗначениеСтроки) Тогда
					Строка[Соответсвие.Ключ + Соответсвие.Значение] = "";
				Иначе	
					Строка[Соответсвие.Ключ + Соответсвие.Значение] = ЗначениеСтроки + " " + XMLСтрока(Строка[Соответсвие.Ключ]);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОбходДерева_ДобавитьДанные(Строка.Строки, СоответсвияКолонок, СоответствиеМетаданных);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьБинарноеПредставлениеСсылки(Ссылка)
	ЗначениеСсылки = XMLСтрока(Ссылка);
	Возврат Сред(ЗначениеСсылки, 20, 4) + Сред(ЗначениеСсылки, 25, 12) + Сред(ЗначениеСсылки, 15, 4) + Сред(ЗначениеСсылки, 10, 4) + Сред(ЗначениеСсылки, 1, 8);
КонецФункции

&НаСервере
Процедура ПодготовитьКоллекцию(КоллекцияКолонок)
	
	УдаляемыеРеквизиты = Новый Массив;
	УдаляемыеЭлементы  = Новый Массив;
	Для Каждого Элемент Из Элементы.РезультатЗапроса.ПодчиненныеЭлементы Цикл 
		УдаляемыеРеквизиты.Добавить(Элемент.ПутьКДанным);
		УдаляемыеЭлементы.Добавить(Элементы[Элемент.Имя]);
	КонецЦикла;
	
	Для Каждого Элемент Из УдаляемыеЭлементы Цикл 
		Элементы.Удалить(Элемент);
	КонецЦикла;
	
	ДобавляемыеРеквизиты = Новый Массив;
	Для Каждого Колонка Из КоллекцияКолонок Цикл 
		Если Колонка.ТипЗначения.СодержитТип(Тип("ТаблицаЗначений")) ИЛИ Колонка.ТипЗначения.СодержитТип(Тип("МоментВремени")) Тогда 
			Продолжить;
		ИначеЕсли Колонка.ТипЗначения.СодержитТип(Тип("Тип")) Тогда 			
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(Колонка.Имя, Новый ОписаниеТипов("Строка"), "РезультатЗапроса", Колонка.Заголовок));
			Продолжить;
		КонецЕсли;
		
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "РезультатЗапроса", Колонка.Заголовок));
		
	КонецЦикла;
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	
	Для Каждого Колонка Из КоллекцияКолонок Цикл 
		Если Колонка.ТипЗначения.СодержитТип(Тип("ТаблицаЗначений")) ИЛИ Колонка.ТипЗначения.СодержитТип(Тип("МоментВремени")) Тогда 
			Продолжить;
		КонецЕсли;
		
		НовыйЭлемент = Элементы.Добавить("РезультатЗапроса" + Колонка.Имя, Тип("ПолеФормы"), Элементы.РезультатЗапроса);
		НовыйЭлемент.ПутьКДанным    = "РезультатЗапроса." + Колонка.Имя;
		НовыйЭлемент.Вид            = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ТолькоПросмотр = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьМассивЗапросовПакета(Знач ТекстЗапроса)
	
	Массив = Новый Массив;
	
	КоличествоЗапросов = СтрЧислоВхождений(ТекстЗапроса, ";");
	Если КоличествоЗапросов = 0 Тогда 
		Массив.Добавить(ПолучитьСвойстваЗапроса(ТекстЗапроса));
	Иначе
		ОставшиесяЗапросы = ТекстЗапроса;
		
		Для НомерЗапроса = 1 По КоличествоЗапросов Цикл 
			КонецЗапроса      = Найти(ОставшиесяЗапросы, ";") - 1;
			ТекущийЗапрос     = СокрЛП(Сред(ОставшиесяЗапросы, 1, КонецЗапроса));
			ОставшиесяЗапросы = СокрЛП(Сред(ОставшиесяЗапросы, КонецЗапроса + 2));
			
			Массив.Добавить(ПолучитьСвойстваЗапроса(ТекущийЗапрос));
		КонецЦикла;
		
		Массив.Добавить(ПолучитьСвойстваЗапроса(ОставшиесяЗапросы));
	КонецЕсли;
	
	МассивЗапросовПакета = Новый ФиксированныйМассив(Массив);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСвойстваЗапроса(Знач ТекстЗапроса)
	
	Возврат Новый Структура("ТекстЗапроса, ПризнакВТ, ИмяТаблицы, Уничтожить",
	ТекстЗапроса,
	Булево(Найти(ВРег(ТекстЗапроса), "ПОМЕСТИТЬ")),
	ПолучитьИмяТаблицы(ТекстЗапроса),
	Булево(Найти(ВРег(ТекстЗапроса), "УНИЧТОЖИТЬ")));
	
КонецФункции 

&НаСервереБезКонтекста
Функция ПолучитьИмяТаблицы(Знач ТекстЗапроса)
	
	Если Найти(ВРег(ТекстЗапроса), "ПОМЕСТИТЬ") > 0 Тогда 
		Возврат СокрЛП(СтрЗаменить(СтрПолучитьСтроку(Сред(ТекстЗапроса, Найти(ТекстЗапроса, "ПОМЕСТИТЬ")), 1), "ПОМЕСТИТЬ", ""));
	ИначеЕсли Найти(ВРег(ТекстЗапроса), "УНИЧТОЖИТЬ") > 0 Тогда 
		Возврат СокрЛП(СтрЗаменить(СтрПолучитьСтроку(Сред(ТекстЗапроса, Найти(ТекстЗапроса, "УНИЧТОЖИТЬ")), 1), "УНИЧТОЖИТЬ", ""));
	Иначе
		СтрокаИмени = СокрЛП(СтрПолучитьСтроку(Сред(ТекстЗапроса, Найти(ТекстЗапроса, "ИЗ")), 2));
		СтрокаИмени = СокрЛП(Сред(СтрокаИмени, 1, Найти(СтрокаИмени, "(") - 1));
		
		Возврат СокрЛП(Сред(СтрокаИмени, 1, Найти(ВРег(СтрокаИмени), "КАК") - 1));
	КонецЕсли;
	
КонецФункции 

&НаСервере
Функция ПолучитьМассивРезультатов(Знач ТекстЗапроса, Знач ПараметрыЗапроса)
	
	Запрос = Новый Запрос;	
	Если Найти(ВРег(ТекстЗапроса), "ПОМЕСТИТЬ") > 0 Тогда 
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли; 
	
	Запрос.Текст = Запрос.Текст + ТекстЗапроса;
	
	Для Каждого ТекущийПараметр Из ПараметрыЗапроса Цикл 
		Запрос.УстановитьПараметр(
		ТекущийПараметр.ИмяПараметра,
		?(ТекущийПараметр.СпособУстановки = "Выражение", Вычислить(ТекущийПараметр.ЗначениеПараметра), ТекущийПараметр.ЗначениеПараметра));
	КонецЦикла; 	
	
	Возврат Запрос.Выполнить();
	
КонецФункции  

&НаСервереБезКонтекста
Функция НаличиеИерархииВЗапросе(ТекстЗапроса)
	Итоги	= "ИТОГИ";
	Позиция	= Найти(ВРег(ТекстЗапроса), Итоги);
	
	Возврат ?(Позиция = 0, Ложь, Истина);
КонецФункции

&НаСервере
Функция ПолучитьМассивРезультатовВременныеТаблицы(Знач ТекстЗапроса, Знач ПараметрыЗапроса)
	
	ТекстЗапросаВременныеТаблицы = "";
	сткВременныеТаблицы = Новый Структура;
	
	Запрос = Новый Запрос;	
	
	ВремяНачалаВыполненияВТ = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Если ЗначениеЗаполнено(АдресВременныхТаблиц) Тогда
		сткВременныеТаблицы = ПолучитьИзВременногоХранилища(АдресВременныхТаблиц);
		СгенерироватьВременныеТаблицы(сткВременныеТаблицы, ТекстЗапросаВременныеТаблицы, Запрос.Параметры);
	КонецЕсли;  	
	
	ТекстЗапроса = ТекстЗапросаВременныеТаблицы + ТекстЗапроса;
	
	Если Найти(ВРег(ТекстЗапроса), "ПОМЕСТИТЬ") > 0 ИЛИ Найти(ВРег(ТекстЗапроса), "УНИЧТОЖИТЬ") Тогда 
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	ПолучитьМассивЗапросовПакета(ТекстЗапроса);
	
	Для Каждого ТекущийПараметр Из ПараметрыЗапроса Цикл 
		Запрос.УстановитьПараметр(
		ТекущийПараметр.ИмяПараметра,
		?(ТекущийПараметр.СпособУстановки = "Выражение", Вычислить(ТекущийПараметр.ЗначениеПараметра), ТекущийПараметр.ЗначениеПараметра));
	КонецЦикла; 	
	
	Для Каждого вт из МассивЗапросовПакета Цикл 
		
		_ИмяТаблицы 	= вт.ИмяТаблицы;
		_ИмяТаблицы 	= СтрЗаменить(_ИмяТаблицы, ".", "");
		_ТекстЗапроса 	= вт.ТекстЗапроса;
		_ПризнакВТ		= вт.ПризнакВТ;
		_Уничтожить		= вт.Уничтожить;
		
		Запрос.Текст = _ТекстЗапроса;
		
		Если ПустаяСтрока(Запрос.Текст) Тогда
			Продолжить;
		КонецЕсли;
		Результат = Запрос.Выполнить();
		
		Если _ПризнакВТ Тогда
			ВремяОкончанияВыполненияВТ = ТекущаяУниверсальнаяДатаВМиллисекундах();
		КонецЕсли;
		
		Если (сткВременныеТаблицы.Свойство(_ИмяТаблицы) ИЛИ НЕ _ПризнакВТ) И НЕ _Уничтожить Тогда
			Продолжить;
		КонецЕсли;
		
		Если _Уничтожить Тогда
			сткВременныеТаблицы.Удалить(_ИмяТаблицы);
		Иначе
			Запрос.Текст = УбратьТекстИзЗапроса(_ТекстЗапроса);			
			сткВременныеТаблицы.Вставить(_ИмяТаблицы, Запрос.Выполнить().Выгрузить());
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ВремяНачалаВыполненияВТ) И ЗначениеЗаполнено(ВремяОкончанияВыполненияВТ) Тогда 
		ВремяВыполненияВТ = "Время выполнения ВТ: " + Формат((ВремяОкончанияВыполненияВТ - ВремяНачалаВыполненияВТ) / 1000, "ЧДЦ=3; ЧРД=.; ЧН=0; ЧГ=");
	Иначе
		ВремяВыполненияВТ = "Время выполнения ВТ: -";
	КонецЕсли;
	
	Если сткВременныеТаблицы.Количество() > 0 Тогда
		АдресВременныхТаблиц = ПоместитьВоВременноеХранилище(сткВременныеТаблицы, Новый УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СгенерироватьВременныеТаблицы (ВременныеТаблици, Текст, Параметры)
	
	Текст = ?(ПустаяСтрока(Текст), "", ";" + Символы.ПС); 
	
	Для Каждого стр из ВременныеТаблици Цикл
		ИмяТаблицы = стр.Ключ;
		
		Параметры.Вставить(ИмяТаблицы, стр.Значение); 		
		
		Текст = Текст + "ВЫБРАТЬ" + Символы.ПС;    
		
		КоличествоКолонок = стр.Значение.Колонки.Количество();
		н = 1;
		Для Каждого Строка из стр.Значение.Колонки Цикл 
			Текст = Текст + ИмяТаблицы + "." + Строка.Имя + " КАК " + Строка.Имя + ?(н = КоличествоКолонок, Символы.ПС, ",") ;
			н = н + 1;
		КонецЦикла;
		
		Текст = Текст + "ПОМЕСТИТЬ " + ИмяТаблицы  + Символы.ПС + " ИЗ &" + ИмяТаблицы + " КАК " + ИмяТаблицы + ";" + Символы.ПС; 
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция УбратьТекстИзЗапроса(ТекстЗапроса)
	
	ПозицияОператора = Найти(ВРег(ТекстЗапроса), "ПОМЕСТИТЬ");
	Если ПозицияОператора > 0 Тогда 
		СтрокаОператора	= СокрЛП(СтрПолучитьСтроку(СокрЛП(Сред(ТекстЗапроса, ПозицияОператора)), 1));
		ТекстЗапроса 	= СтрЗаменить(ТекстЗапроса, СтрокаОператора, "");
	Иначе
		Возврат "";
	КонецЕсли;
	
	ПозицияОператора = Найти(ВРег(ТекстЗапроса), "ИНДЕКСИРОВАТЬ");
	Если ПозицияОператора > 0 Тогда 
		СтрокаОператора	= СокрЛП(Сред(ТекстЗапроса, ПозицияОператора));
		ТекстЗапроса 	= СтрЗаменить(ТекстЗапроса, СтрокаОператора, "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаКлиенте
Процедура УстановитьСвойствоЭлементаФормы(ИмяЭлемента, ИмяСвойства, Значение)
	
	ЭлементФормы = Элементы.Найти(ИмяЭлемента);
	Если Не ЭлементФормы = Неопределено Тогда
		ЭлементФормы[ИмяСвойства] = Значение;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура СохранитьКодЗапроса(ИмяФайла, Значение)
	
	ЗначениеВФайл(ИмяФайла, Значение);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяМетаданногоПоТипу(Тип)
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
	Если ОбъектМетаданных = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбъектМетаданных.Имя;
	
КонецФункции 

&НаСервере
Процедура НайтиПараметрыЗапроса()
	
	Попытка
		ТекущаяСтрока = Элементы.ДеревоЗапросов.ТекущаяСтрока;
		
		Если ТекущаяСтрока = Неопределено Тогда Возврат; КонецЕсли;
		
		ЭлементКоллекции = ДеревоЗапросов.НайтиПоИдентификатору(ТекущаяСтрока);
		_ТекстЗапроса 		= ЭлементКоллекции.ТекстЗапроса;
		_ПараметрыЗапроса 	= ЭлементКоллекции.ПараметрыЗапроса;
		
		Запрос = Новый Запрос(_ТекстЗапроса);
		ОписаниеПараметров = Запрос.НайтиПараметры();
		
		Фильтр = Новый Структура;		
		
		Для Каждого Параметр Из ОписаниеПараметров Цикл 
			
			Фильтр.Вставить("ИмяПараметра", Параметр.Имя);
			
			НайденаяСтрока = _ПараметрыЗапроса.НайтиСтроки(Фильтр);
			
			Если НайденаяСтрока.Количество() > 0 Тогда Продолжить; КонецЕсли;
			
			СтрокаПараметра = _ПараметрыЗапроса.Добавить();
			СтрокаПараметра.ИмяПараметра    = Параметр.Имя;
			СтрокаПараметра.СпособУстановки = "Значение";
			СтрокаПараметра.ТипЗначения     = Параметр.ТипЗначения;
			
			Модифицированность = Истина;
			
		КонецЦикла;
	Исключение
		Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), СтатусСообщения.Важное);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаАвтосохранения()
	
	Если Объект.ИспользоватьАвтосохранение Тогда
		Попытка 
			Если Объект.ИнтервалАвтосохранения > 10 Тогда
				ПодключитьОбработчикОжидания("АвтосохраненияЗапроса", Объект.ИнтервалАвтосохранения);
			КонецЕсли;
		Исключение
			
		КонецПопытки;
	Иначе
		ОтключитьОбработчикОжидания("АвтосохраненияЗапроса");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтосохраненияЗапроса()
	
	Если Не ПустаяСтрока(ПутьКФайлуЗапросов) Тогда 
		СохранитьЗапросы();
		ПоказатьОповещениеПользователя(НСтр("ru = 'Автосохранение прошло успешно.'"), ПутьКФайлуЗапросов);
		Модифицированность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СохранитьРезультатСервер()
	
	РезультатДерево = РеквизитФормыВЗначение("РезультатЗапроса");
	
	ТабДок = Новый ТабличныйДокумент;
	
	Секция = ТабДок.ПолучитьОбласть("R1");
	
	НомерКолонки = 0;
	Для Каждого КЛ Из РезультатДерево.Колонки Цикл
		НомерКолонки = НомерКолонки + 1;
		Секция.Область(1, НомерКолонки).Текст = КЛ.Имя;
	КонецЦикла;
	
	ТабДок.Вывести(Секция,0);
	
	Секция = ТабДок.ПолучитьОбласть("R2");
	
	ТабДок.НачатьАвтогруппировкуСтрок();
	
	ВыводДерева(ТабДок, РезультатДерево, , РезультатДерево.Колонки, Секция);
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	
	Возврат ТабДок;
	
КонецФункции

&НаКлиенте
Функция ПолучитьДиалогОткрытияФайла(ИмяФайла, ИндексФильтра = 0)
	сткРезультат = Новый Структура;
	
	РасширенияФайлов = Новый Соответствие;
	РасширенияФайлов.Вставить(ТипФайлаТабличногоДокумента.XLS, "Файлы Microsoft Office Excel (*.xls)|*.xls");
	
	МассивТипов = Новый Массив;
	
	Фильтр = "";
	Для Каждого Элемент ИЗ РасширенияФайлов Цикл
		Фильтр = Фильтр + Элемент.Значение + "|";	
		МассивТипов.Добавить(Элемент.Ключ);
	КонецЦикла;
	Фильтр = Лев(Фильтр, СтрДлина(Фильтр)-1);
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";	
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.ПолноеИмяФайла = ИмяФайла;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = "Сохранить как ...";
	ДиалогОткрытияФайла.ИндексФильтра = ИндексФильтра;
	
	булФайлВыбран = ДиалогОткрытияФайла.Выбрать();
	
	ИндексФильтра = ДиалогОткрытияФайла.ИндексФильтра;
	
	Если Не булФайлВыбран Тогда
		Возврат Неопределено;
	Иначе
		сткРезультат.Вставить("ПолноеИмяФайла", ДиалогОткрытияФайла.ПолноеИмяФайла); 
		сткРезультат.Вставить("ТипФайла", МассивТипов[ИндексФильтра]);
		Возврат(сткРезультат);
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ВыводДерева (ТабДок, СтрокаДерева, Уровень = 0, Колонки, Секция)
	Для Каждого стр Из СтрокаДерева.Строки Цикл
		НомерКолонки = 0;
		отступ = "";
		Для н = 1 По Уровень Цикл   
			отступ = отступ + " ";
		КонецЦикла;
		Для Каждого КЛ Из Колонки Цикл
			НомерКолонки = НомерКолонки + 1;   
			Секция.Область(1, НомерКолонки).Текст = ?(НомерКолонки = 1, отступ + стр[КЛ.Имя], стр[КЛ.Имя]);
		КонецЦикла;
		ПерваяСтрока = Ложь;
		ТабДок.Вывести(Секция,Уровень + 1);
		ВыводДерева(ТабДок, стр, Уровень + 1, Колонки, Секция);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПоискТекста(НаименованиеПоиска, ИдентификаторСтроки)
	
	НайтиТекстВЗапросе(ДеревоЗапросов.ПолучитьЭлементы(), ИндексыДляПоиска, НаименованиеПоиска);
	
	_КоличествоНайденыхСтрок = ИндексыДляПоиска.Количество();
	
	Если _КоличествоНайденыхСтрок > 0 Тогда
		ИдентификаторСтроки = ИндексыДляПоиска[0].Значение;
		СтрокаДляПозиционирования = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НайтиТекстВЗапросе(КоллекцияЭлементовДерева, сзИндексы, НаименованиеПоиска)
	
	Для Каждого СтрокаДерева Из КоллекцияЭлементовДерева Цикл 
		НайденаСтрокаВЗапросе = НайтиНужнуюСтроку(СтрокаДерева.ТекстЗапроса, НаименованиеПоиска);
		
		Если НайденаСтрокаВЗапросе Тогда
			сзИндексы.Добавить(СтрокаДерева.ПолучитьИдентификатор(), СтрокаДерева.Запрос);
		КонецЕсли;
		
		КоллекцияЭлементов = СтрокаДерева.ПолучитьЭлементы(); 		
		Если КоллекцияЭлементов.Количество() > 0 Тогда			
			НайтиТекстВЗапросе(КоллекцияЭлементов, сзИндексы, НаименованиеПоиска)	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиНужнуюСтроку(_Текст, _СтрокаПоиск)
	
	Если Найти(НРег(_Текст), НРег(_СтрокаПоиск)) > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции



&НаКлиенте
Функция ПолучитьПолеВыгрузкиИзСписка()
	
	Если РезультатЗапроса.ПолучитьЭлементы().Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СписокКолонок = ПолучитьПолеВыгрузкиИзСпискаСервер();
	
	ЭлементСпискаЗначений = СписокКолонок.ВыбратьЭлемент("Выберите поле выгрузки");
	
	Если ЭлементСпискаЗначений = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ЭлементСпискаЗначений.Значение;	
КонецФункции

&НаСервере
Функция ПолучитьПолеВыгрузкиИзСпискаСервер() 
	СписокКолонок = Новый СписокЗначений;
	
	_Колонки = РеквизитФормыВЗначение("РезультатЗапроса").Колонки;
	Для Каждого элем Из _Колонки Цикл
		СписокКолонок.Добавить(элем.Имя);
	КонецЦикла;
	
	Возврат СписокКолонок;  	
КонецФункции

&НаСервере
Функция ПроверитьОтборРегистра(ОтборРегистра)
	
	ПоляОтбора = "";
	
	ПоляЗапроса = РеквизитФормыВЗначение("РезультатЗапроса").Колонки;
	
	ВсеНорм = Истина;
	
	Для Каждого элем Из ОтборРегистра Цикл
		
		ПоляОтбора = ПоляОтбора + ", " + элем.Имя;
		
		Если ПоляЗапроса.Найти(элем.Имя) = Неопределено И ВсеНорм Тогда
			ВсеНорм = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	ПоляОтбора = Сред(ПоляОтбора, 3);
	
	Если НЕ ВсеНорм Тогда
		ТекстОшибки = "Результат запроса должен содержать поля соответстующие отбору регистра: " + ПоляОтбора;
		
		Сообщить(ТекстОшибки, СтатусСообщения.Внимание);
	КонецЕсли;
	
	Возврат ВсеНорм;	
КонецФункции

#КонецОбласти

#Область Выполнить_Обработчик

&НаКлиенте
Процедура ДеревоЗапросовТекстОбработчикаПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчик(Команда)
	
	ТекущиеДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Команда = Элементы.ДеревоЗапросовТекстОбработчика.ВыделенныйТекст;
		
		Если ПустаяСтрока(Команда) Тогда
			Команда = ТекущиеДанные.ТекстОбработчика;
		КонецЕсли;
		
		Если ПустаяСтрока(Команда) Тогда
			Возврат;
		КонецЕсли;
		
		ВыполнитьОбработчикСервер(Команда);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОбработчикСервер(_Команда)
	
	Попытка
		Выполнить(_Команда);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область Шаблоны

&НаКлиенте
Процедура ОбходРезультата(Команда)
	
	ТекущиеДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		стрТекст = ТекущиеДанные.ТекстОбработчика;
		
		стрТекст = стрТекст + 
		"
		|Для Каждого стр Из РезультатЗапроса.ПолучитьЭлементы() Цикл
		|	
		|	
		|	
		|КонецЦикла;";
		
		ТекущиеДанные.ТекстОбработчика = стрТекст;
				
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Удаление

// Пометить объекты на удаление...
&НаКлиенте
Процедура кпПометитьОбъектыНаУдаление(Команда)  	
	
	// Получим колонку по которой надо пометить объекты на удаление
	ПолеВыгрузки = ПолучитьПолеВыгрузкиИзСписка(); 	
	Если ПолеВыгрузки = Неопределено Тогда
		Возврат;
	КонецЕсли; 	
	
	ПоказатьВопрос(Новый ОписаниеОповещения("Удаление_УстановитьПометкиУдаления", ЭтотОбъект, Новый Структура("ПолеВыгрузки", ПолеВыгрузки)), "Вы уверены, что хотите установить пометки удаления?", РежимДиалогаВопрос.ОКОтмена); 
	
КонецПроцедуры

&НаКлиенте
Процедура Удаление_УстановитьПометкиУдаления(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Удаление_УстановитьПометкиУдаления_Сервер(ДополнительныеПараметры.ПолеВыгрузки);
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура Удаление_УстановитьПометкиУдаления_Сервер(_ПолеВыгрузки) 	
	ОбходДерева_При_УстановкиПометкиУдаления(РезультатЗапроса.ПолучитьЭлементы(), _ПолеВыгрузки); 
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбходДерева_При_УстановкиПометкиУдаления(Строки, _ПолеВыгрузки)
	
	Для Каждого Строка из Строки Цикл 
		
		Попытка
			ОбъектБазы = Строка[_ПолеВыгрузки].ПолучитьОбъект();
			
			ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(ОбъектБазы));   			
			ЭтоДокумент = Метаданные.Документы.Содержит(ОбъектМетаданных);
			
			Если ЭтоДокумент Тогда
				
				Для Каждого Движение Из ОбъектБазы.Движения Цикл
					Движение.ОбменДанными.Загрузка = Истина;
					Движение.Записать();
				КонецЦикла;
				
				Попытка
					ОбъектБазы.Резерв = Ложь;
				Исключение
				КонецПопытки;
				
				ОбъектБазы.Проведен = Ложь;
			КонецЕсли;
			
			ОбъектБазы.ПометкаУдаления = Истина;
			ОбъектБазы.ОбменДанными.Загрузка = Истина;
			ОбъектБазы.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
		ОбходДерева_При_УстановкиПометкиУдаления(Строка.ПолучитьЭлементы(), _ПолеВыгрузки)
		
	КонецЦикла;
	
КонецПроцедуры

// Удалить объекты...
&НаКлиенте
Процедура кпУдалитьОбъекты(Команда)
	
	// Получим колонку по которой надо удалить объекты
	ПолеВыгрузки = ПолучитьПолеВыгрузкиИзСписка(); 	
	Если ПолеВыгрузки = Неопределено Тогда
		Возврат;
	КонецЕсли; 	
	
	ПоказатьВопрос(Новый ОписаниеОповещения("Удаление_УдалитьОбъектыНепосредственно", ЭтотОбъект, Новый Структура("ПолеВыгрузки", ПолеВыгрузки)), "Вы уверены, что хотите удалить объекты базы?", РежимДиалогаВопрос.ОКОтмена); 
	
КонецПроцедуры

&НаКлиенте
Процедура Удаление_УдалитьОбъектыНепосредственно(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Удаление_УдалитьОбъектыНепосредственно_Сервер(ДополнительныеПараметры.ПолеВыгрузки);
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура Удаление_УдалитьОбъектыНепосредственно_Сервер(_ПолеВыгрузки) 	
	ОбходДерева_При_УдалитьОбъектыНепосредственно(РезультатЗапроса.ПолучитьЭлементы(), _ПолеВыгрузки); 
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбходДерева_При_УдалитьОбъектыНепосредственно(Строки, _ПолеВыгрузки)
	
	Для Каждого Строка из Строки Цикл 
		
		Попытка
			ОбъектБазы = Строка[_ПолеВыгрузки].ПолучитьОбъект();
			
			ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(ОбъектБазы));   			
			ЭтоДокумент = Метаданные.Документы.Содержит(ОбъектМетаданных);
			
			Если ЭтоДокумент Тогда
				
				Для Каждого Движение Из ОбъектБазы.Движения Цикл
					Движение.ОбменДанными.Загрузка = Истина;
					Движение.Записать();
				КонецЦикла;
								
			КонецЕсли;
			
			ОбъектБазы.ОбменДанными.Загрузка = Истина;
			ОбъектБазы.Удалить();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
		ОбходДерева_При_УдалитьОбъектыНепосредственно(Строка.ПолучитьЭлементы(), _ПолеВыгрузки)
		
	КонецЦикла;
	
КонецПроцедуры

// Удалить записи регистра...
&НаКлиенте
Процедура кпУдалитьЗаписиРегистра(Команда)
	
	// Получим колонку по которой надо удалить записи регистра 
	ОповещениеОВыборе = Новый ОписаниеОповещения("ПолучитьРегистр_УдалитьЗаписиРегистра", ЭтотОбъект);
	ОткрытьФорму("Обработка.КонсольЗапросов.Форма.ДеревоМетаданных",,,,,,ОповещениеОВыборе);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьРегистр_УдалитьЗаписиРегистра(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("Удаление_УдалитьЗаписиРегистра", ЭтотОбъект, Новый Структура("ПолученныйРегистр", Результат)), "Вы уверены, что хотите удалить объекты базы?", РежимДиалогаВопрос.ОКОтмена);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура Удаление_УдалитьЗаписиРегистра(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Удаление_УдалитьЗаписиРегистра_Сервер(ДополнительныеПараметры.ПолученныйРегистр);
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура Удаление_УдалитьЗаписиРегистра_Сервер(_ПолученныйРегистр) 	
	
	НаборЗаписей = Вычислить(_ПолученныйРегистр.ИмяМенеджера).СоздатьНаборЗаписей();
	
	_ОтборРегистра = НаборЗаписей.Отбор;
	
	Если НЕ ПроверитьОтборРегистра(_ОтборРегистра) Тогда
		Возврат;
	КонецЕсли;
	
	ОбходДерева_При_УдалитьЗаписиРегистра(РезультатЗапроса.ПолучитьЭлементы(), НаборЗаписей, _ОтборРегистра); 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбходДерева_При_УдалитьЗаписиРегистра(Строки, _НаборЗаписей, _ОтборРегистра)
	
	Для Каждого Строка из Строки Цикл 
		
		Для Каждого поле Из _ОтборРегистра Цикл
			_НаборЗаписей.Отбор[поле.Имя].Установить(Строка[поле.Имя]);
		КонецЦикла;
		
		Попытка
			_НаборЗаписей.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
		ОбходДерева_При_УдалитьЗаписиРегистра(Строка.ПолучитьЭлементы(), _НаборЗаписей, _ОтборРегистра)
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Регистрация

// Зарегистрировать объекты...
&НаКлиенте
Процедура кпЗарегистрироватьОбъектыНаОбмен(Команда)
	
	// Получим колонку по которой надо произвести регистрацию  	
	ПолеВыгрузки = ПолучитьПолеВыгрузкиИзСписка();  	
	Если ПолеВыгрузки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РезультатЗапроса.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТипПоля = ТипЗнч(ТекущиеДанные[ПолеВыгрузки]);                           
	
	// получим список узлов
	ОповещениеОВыборе = Новый ОписаниеОповещения("ПолучимСписокУзлов", ЭтотОбъект, Новый Структура("ПолеВыгрузки, ИмяКнопки", ПолеВыгрузки, "ЗарегистрироватьОбъектыНаОбмен"));
	ОткрытьФорму("Обработка.КонсольЗапросов.Форма.ФормаВыбораУзловПлановОбмена", Новый Структура("ИмяТипа", ТипПоля),,,,,ОповещениеОВыборе);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучимСписокУзлов(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда 
		Если РезультатЗапроса.ПолучитьЭлементы().Количество() = 0 Тогда 
			Возврат;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("ИмяКнопки") И ДополнительныеПараметры.ИмяКнопки = "ЗарегистрироватьОбъектыНаОбмен" Тогда
			Регистрация_ЗарегистрироватьОбъектыНаОбмен_Сервер(Результат, ДополнительныеПараметры.ПолеВыгрузки);
		ИначеЕсли ДополнительныеПараметры.Свойство("ИмяКнопки") И ДополнительныеПараметры.ИмяКнопки = "ЗарегистрироватьЗаписиРегистраНаОбмен" Тогда
			Регистрация_ЗарегистрироватьЗаписиРегистраНаОбмен_Сервер(Результат, ДополнительныеПараметры.ПолеВыгрузки);
		ИначеЕсли ДополнительныеПараметры.Свойство("ИмяКнопки") И ДополнительныеПараметры.ИмяКнопки = "ЗарегистрироватьУдалениеОбъектовНаОбмен" Тогда
			Регистрация_ЗарегистрироватьУдалениеОбъектовНаОбмен_Сервер(Результат, ДополнительныеПараметры.ПолеВыгрузки);
		ИначеЕсли ДополнительныеПараметры.Свойство("ИмяКнопки") И ДополнительныеПараметры.ИмяКнопки = "ЗарегистрироватьПустыеНаборы" Тогда
			Регистрация_ЗарегистрироватьПустыеНаборы_Сервер(Результат, ДополнительныеПараметры.ПолеВыгрузки);
		ИначеЕсли ДополнительныеПараметры.Свойство("ИмяКнопки") И ДополнительныеПараметры.ИмяКнопки = "УдалитьРегистрациюИзмененийОбъектов" Тогда
			Регистрация_УдалитьРегистрациюИзмененийОбъектов_Сервер(Результат, ДополнительныеПараметры.ПолеВыгрузки);
		ИначеЕсли ДополнительныеПараметры.Свойство("ИмяКнопки") И ДополнительныеПараметры.ИмяКнопки = "УдалитьРегистрациюЗаписейРегистра" Тогда
			Регистрация_УдалитьРегистрациюЗаписейРегистра_Сервер(Результат, ДополнительныеПараметры.ПолеВыгрузки);
		КонецЕсли; 		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура Регистрация_ЗарегистрироватьОбъектыНаОбмен_Сервер(_МассивУзлов, _ПолеВыгрузки) 	
	ОбходДерева_ЗарегистрироватьОбъектыНаОбмен(РезультатЗапроса.ПолучитьЭлементы(), _МассивУзлов, _ПолеВыгрузки);	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбходДерева_ЗарегистрироватьОбъектыНаОбмен(Строки, _МассивУзлов, _ПолеВыгрузки)
	
	Для Каждого Строка Из Строки Цикл
		Если НЕ ЗначениеЗаполнено(Строка[_ПолеВыгрузки]) Тогда
			// проверка, чтобы не зарегистрировать всю ИБД в узел
			Продолжить;			
		КонецЕсли;
		
		ПланыОбмена.ЗарегистрироватьИзменения(_МассивУзлов, Строка[_ПолеВыгрузки]);
		
		ОбходДерева_ЗарегистрироватьОбъектыНаОбмен(Строка.ПолучитьЭлементы(), _МассивУзлов, _ПолеВыгрузки);
		
	КонецЦикла;
	
КонецПроцедуры

// Зарегистрировать наборы записей...
&НаКлиенте
Процедура кпЗарегистрироватьЗаписиРегистраНаОбмен(Команда)	
	ОповещениеОВыборе = Новый ОписаниеОповещения("ПолучитьРегистр_ЗарегистрироватьЗаписиРегистраНаОбмен", ЭтотОбъект);
	ОткрытьФорму("Обработка.КонсольЗапросов.Форма.ДеревоМетаданных",,,,,,ОповещениеОВыборе);	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьРегистр_ЗарегистрироватьЗаписиРегистраНаОбмен(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда   		
		// получим список узлов
		ОповещениеОВыборе = Новый ОписаниеОповещения("ПолучимСписокУзлов", ЭтотОбъект, Новый Структура("ПолеВыгрузки, ИмяКнопки", Результат, "ЗарегистрироватьЗаписиРегистраНаОбмен"));
		ОткрытьФорму("Обработка.КонсольЗапросов.Форма.ФормаВыбораУзловПлановОбмена", Новый Структура("ИмяТипа", Результат.ИмяМенеджера),,,,,ОповещениеОВыборе);
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура Регистрация_ЗарегистрироватьЗаписиРегистраНаОбмен_Сервер(_МассивУзлов, _ПолученныйРегистр) 
	
	НаборЗаписей = Вычислить(_ПолученныйРегистр.ИмяМенеджера).СоздатьНаборЗаписей();
	
	ОтборРегистра = НаборЗаписей.Отбор;
	
	Если НЕ ПроверитьОтборРегистра(ОтборРегистра) Тогда
		Возврат;
	КонецЕсли;
	
	ОбходДерева_При_ЗарегистрироватьЗаписиРегистраНаОбмен(РезультатЗапроса.ПолучитьЭлементы(), НаборЗаписей, ОтборРегистра, _МассивУзлов);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбходДерева_При_ЗарегистрироватьЗаписиРегистраНаОбмен(Строки, _НаборЗаписей, _ОтборРегистра, _МассивУзлов)
	
	Для Каждого Строка из Строки Цикл 
		
		Для Каждого поле Из _ОтборРегистра Цикл
			_НаборЗаписей.Отбор[поле.Имя].Установить(Строка[поле.Имя]);
		КонецЦикла;
		
		_НаборЗаписей.Прочитать();
		
		ПланыОбмена.ЗарегистрироватьИзменения(_МассивУзлов, _НаборЗаписей);
		
		ОбходДерева_При_ЗарегистрироватьЗаписиРегистраНаОбмен(Строка.ПолучитьЭлементы(), _НаборЗаписей, _ОтборРегистра, _МассивУзлов)
		
	КонецЦикла;
	
КонецПроцедуры

// Зарегистрировать удаление объектов...
&НаКлиенте
Процедура кпЗарегистрироватьУдалениеОбъектовНаОбмен(Команда)
	
	// Получим колонку по которой надо произвести регистрацию  	
	ПолеВыгрузки = ПолучитьПолеВыгрузкиИзСписка();  	
	Если ПолеВыгрузки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РезультатЗапроса.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТипПоля = ТипЗнч(ТекущиеДанные[ПолеВыгрузки]);                           
	
	// получим список узлов
	ОповещениеОВыборе = Новый ОписаниеОповещения("ПолучимСписокУзлов", ЭтотОбъект, Новый Структура("ПолеВыгрузки, ИмяКнопки", ПолеВыгрузки, "ЗарегистрироватьУдалениеОбъектовНаОбмен"));
	ОткрытьФорму("Обработка.КонсольЗапросов.Форма.ФормаВыбораУзловПлановОбмена", Новый Структура("ИмяТипа", ТипПоля),,,,,ОповещениеОВыборе);
	
КонецПроцедуры

&НаСервере
Процедура Регистрация_ЗарегистрироватьУдалениеОбъектовНаОбмен_Сервер(_МассивУзлов, _ПолеВыгрузки) 	
	ОбходДерева_ЗарегистрироватьУдалениеОбъектовНаОбмен(РезультатЗапроса.ПолучитьЭлементы(), _МассивУзлов, _ПолеВыгрузки);	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбходДерева_ЗарегистрироватьУдалениеОбъектовНаОбмен(Строки, _МассивУзлов, _ПолеВыгрузки)
	
	Для Каждого Строка Из Строки Цикл
		Если НЕ ЗначениеЗаполнено(Строка[_ПолеВыгрузки]) Тогда
			// проверка, чтобы не зарегистрировать всю ИБД в узел
			Продолжить;			
		КонецЕсли;
		
		ПланыОбмена.ЗарегистрироватьИзменения(_МассивУзлов, Новый УдалениеОбъекта(Строка[_ПолеВыгрузки]));
		
		ОбходДерева_ЗарегистрироватьУдалениеОбъектовНаОбмен(Строка.ПолучитьЭлементы(), _МассивУзлов, _ПолеВыгрузки);
		
	КонецЦикла;
	
КонецПроцедуры

// Зарегистрировать пустые наборы...
&НаКлиенте
Процедура кпЗарегистрироватьПустыеНаборы(Команда)
	ОповещениеОВыборе = Новый ОписаниеОповещения("ПолучитьРегистр_ЗарегистрироватьПустыеНаборы", ЭтотОбъект);
	ОткрытьФорму("Обработка.КонсольЗапросов.Форма.ДеревоМетаданных",,,,,,ОповещениеОВыборе);	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьРегистр_ЗарегистрироватьПустыеНаборы(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда   		
		// получим список узлов
		ОповещениеОВыборе = Новый ОписаниеОповещения("ПолучимСписокУзлов", ЭтотОбъект, Новый Структура("ПолеВыгрузки, ИмяКнопки", Результат, "ЗарегистрироватьПустыеНаборы"));
		ОткрытьФорму("Обработка.КонсольЗапросов.Форма.ФормаВыбораУзловПлановОбмена", Новый Структура("ИмяТипа", Результат.ИмяМенеджера),,,,,ОповещениеОВыборе);
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура Регистрация_ЗарегистрироватьПустыеНаборы_Сервер(_МассивУзлов, _ПолученныйРегистр) 
	
	НаборЗаписей = Вычислить(_ПолученныйРегистр.ИмяМенеджера).СоздатьНаборЗаписей();
	
	ОтборРегистра = НаборЗаписей.Отбор;
	
	Если НЕ ПроверитьОтборРегистра(ОтборРегистра) Тогда
		Возврат;
	КонецЕсли;
	
	ОбходДерева_При_ЗарегистрироватьПустыеНаборы(РезультатЗапроса.ПолучитьЭлементы(), НаборЗаписей, ОтборРегистра, _МассивУзлов);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбходДерева_При_ЗарегистрироватьПустыеНаборы(Строки, _НаборЗаписей, _ОтборРегистра, _МассивУзлов)
	
	Для Каждого Строка из Строки Цикл 
		
		_НаборЗаписей.Очистить();
		
		Для Каждого поле Из _ОтборРегистра Цикл
			_НаборЗаписей.Отбор[поле.Имя].Установить(Строка[поле.Имя]);
		КонецЦикла;
		
		ПланыОбмена.ЗарегистрироватьИзменения(_МассивУзлов, _НаборЗаписей);
		
		ОбходДерева_При_ЗарегистрироватьПустыеНаборы(Строка.ПолучитьЭлементы(), _НаборЗаписей, _ОтборРегистра, _МассивУзлов);
		
	КонецЦикла;
	
КонецПроцедуры

// Удалить регистрацию объектов...
&НаКлиенте
Процедура кпУдалитьРегистрациюИзмененийОбъектов(Команда)
	
	// Получим колонку по которой надо произвести удаление регистрации  	
	ПолеВыгрузки = ПолучитьПолеВыгрузкиИзСписка();  	
	Если ПолеВыгрузки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РезультатЗапроса.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТипПоля = ТипЗнч(ТекущиеДанные[ПолеВыгрузки]); 
	
	// получим список узлов
	
	ОповещениеОВыборе = Новый ОписаниеОповещения("ПолучимСписокУзлов", ЭтотОбъект, Новый Структура("ПолеВыгрузки, ИмяКнопки", ПолеВыгрузки, "УдалитьРегистрациюИзмененийОбъектов"));
	ОткрытьФорму("Обработка.КонсольЗапросов.Форма.ФормаВыбораУзловПлановОбмена", Новый Структура("ИмяТипа", ТипПоля),,,,,ОповещениеОВыборе);
	
КонецПроцедуры

&НаСервере
Процедура Регистрация_УдалитьРегистрациюИзмененийОбъектов_Сервер(_МассивУзлов, _ПолеВыгрузки) 	
	ОбходДерева_УдалитьРегистрациюИзмененийОбъектов(РезультатЗапроса.ПолучитьЭлементы(), _МассивУзлов, _ПолеВыгрузки);	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбходДерева_УдалитьРегистрациюИзмененийОбъектов(Строки, _МассивУзлов, _ПолеВыгрузки)
	
	Для Каждого Строка Из Строки Цикл
		
		ПланыОбмена.УдалитьРегистрациюИзменений(_МассивУзлов, Строка[_ПолеВыгрузки]);
		
		ОбходДерева_УдалитьРегистрациюИзмененийОбъектов(Строка.ПолучитьЭлементы(), _МассивУзлов, _ПолеВыгрузки);
		
	КонецЦикла;
	
КонецПроцедуры

// Удалить регистрацию наборов записей...
&НаКлиенте
Процедура кпУдалитьРегистрациюЗаписейРегистра(Команда)
	ОповещениеОВыборе = Новый ОписаниеОповещения("ПолучитьРегистр_УдалитьРегистрациюЗаписейРегистра", ЭтотОбъект);
	ОткрытьФорму("ВнешняяОбработка.КонсольЗапросов.Форма.ДеревоМетаданных",,,,,,ОповещениеОВыборе);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьРегистр_УдалитьРегистрациюЗаписейРегистра(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда   		
		// получим список узлов
		ОповещениеОВыборе = Новый ОписаниеОповещения("ПолучимСписокУзлов", ЭтотОбъект, Новый Структура("ПолеВыгрузки, ИмяКнопки", Результат, "УдалитьРегистрациюЗаписейРегистра"));
		ОткрытьФорму("ВнешняяОбработка.КонсольЗапросов.Форма.ФормаВыбораУзловПлановОбмена", Новый Структура("ИмяТипа", Результат.ИмяМенеджера),,,,,ОповещениеОВыборе);
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура Регистрация_УдалитьРегистрациюЗаписейРегистра_Сервер(_МассивУзлов, _ПолученныйРегистр) 
	
	НаборЗаписей = Вычислить(_ПолученныйРегистр.ИмяМенеджера).СоздатьНаборЗаписей();
	
	ОтборРегистра = НаборЗаписей.Отбор;
	
	Если НЕ ПроверитьОтборРегистра(ОтборРегистра) Тогда
		Возврат;
	КонецЕсли;
	
	ОбходДерева_При_УдалитьРегистрациюЗаписейРегистра(РезультатЗапроса.ПолучитьЭлементы(), НаборЗаписей, ОтборРегистра, _МассивУзлов);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбходДерева_При_УдалитьРегистрациюЗаписейРегистра(Строки, _НаборЗаписей, _ОтборРегистра, _МассивУзлов)
	
	Для Каждого Строка из Строки Цикл 
		
		Для Каждого поле Из _ОтборРегистра Цикл
			_НаборЗаписей.Отбор[поле.Имя].Установить(Строка[поле.Имя]);
		КонецЦикла;
		
		_НаборЗаписей.Прочитать();
		
		ПланыОбмена.УдалитьРегистрациюИзменений(_МассивУзлов, _НаборЗаписей);
		
		ОбходДерева_При_УдалитьРегистрациюЗаписейРегистра(Строка.ПолучитьЭлементы(), _НаборЗаписей, _ОтборРегистра, _МассивУзлов);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Загрузка_выгрузка_объектных_данных

// Выгрузить объекты...
&НаКлиенте
Процедура кпВыгрузить(Команда)
	
	Перем АдресФайла;
	
	Если РезультатЗапроса.ПолучитьЭлементы().Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// выбрать путь для выгрузки
	ПутьВыгрузки = "";
	Режим = РежимДиалогаВыбораФайла.Сохранение;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Заголовок = "Выберите каталог для выгрузки";
	
	ДиалогОткрытияФайла.Фильтр = "(*.xml)|*.xml";
	ДиалогОткрытияФайла.Расширение = "xml";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		Каталог = ?(ДиалогОткрытияФайла.Каталог <> Неопределено, ДиалогОткрытияФайла.Каталог, ПутьВыгрузки);
	Иначе
		Возврат;
	КонецЕсли;
	ПутьВыгрузки = ДиалогОткрытияФайла.ПолноеИмяФайла;
	
	// не выбрали путь для выгрузки
	Если Не ЗначениеЗаполнено(Каталог) Тогда
		Сообщить("Не выбран путь выгрузки!");
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	// Получим колонку по которой надо Выгрузить объекты
	ПолеВыгрузки = ПолучитьПолеВыгрузкиИзСписка(); 	
	Если ПолеВыгрузки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РезультатЗапроса.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	_ТипПоля = ТипЗнч(ТекущиеДанные[ПолеВыгрузки]);
	
	Если ЭтоДокумент(_ТипПоля) Тогда 
		ПоказатьВопрос(Новый ОписаниеОповещения("Выгрузить_ВыгружатьДвижения", ЭтотОбъект, Новый Структура("АдресФайла, ПутьВыгрузки, ПолеВыгрузки, ТипПоля", АдресФайла, ПутьВыгрузки, ПолеВыгрузки, _ТипПоля)), "Выгружать движения?", РежимДиалогаВопрос.ОКОтмена); 
	Иначе
		ВыполнитьВыгрузку(АдресФайла, ПутьВыгрузки, ПолеВыгрузки, _ТипПоля, Ложь);
	КонецЕсли;    
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить_ВыгружатьДвижения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		_ВыгружатьДвижения = Истина;
	ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда
		_ВыгружатьДвижения = Ложь;
	КонецЕсли; 
	
	ВыполнитьВыгрузку(ДополнительныеПараметры.АдресФайла, ДополнительныеПараметры.ПутьВыгрузки, ДополнительныеПараметры.ПолеВыгрузки, ДополнительныеПараметры.ТипПоля, _ВыгружатьДвижения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыгрузку(_АдресФайла, ПутьВыгрузки, _ПолеВыгрузки, _ТипПоля, _ВыгружатьДвижения)
	Состояние(Нстр("ru='Выполняется выгрузка объекта конфигурации. Пожалуйста, подождите...'"));
	Если ВыполнитьВыгрузкуНаСервере(_АдресФайла, _ПолеВыгрузки, _ТипПоля, _ВыгружатьДвижения) Тогда 		
		Сообщить("Выгрузка успешно завершена.");  		
		ПолучитьФайл(_АдресФайла, ПутьВыгрузки, Ложь);  		
	Иначе
		Сообщить("Выгрузка не завершена.");
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Функция ЭтоДокумент(_ТипПоля)
	
	_ОбъектМетаданных = Метаданные.НайтиПоТипу(_ТипПоля); 	
	_ПолноеИмяОбъекта = _ОбъектМетаданных.ПолноеИмя(); 	
	_ПозицияРазделителя = Найти(_ПолноеИмяОбъекта, "."); 	
	_ИмяОбъектаМетаданных = Сред(_ПолноеИмяОбъекта, _ПозицияРазделителя + 1);
	_ТипОбъектаМетаданных = Сред(_ПолноеИмяОбъекта, 1, _ПозицияРазделителя - 1);
	
	Возврат ?(_ТипОбъектаМетаданных = "Документ", Истина, Ложь);
	
КонецФункции

&НаСервере
Функция ВыполнитьВыгрузкуНаСервере(АдресФайла, _ПолеВыгрузки, _ТипПоля, _ВыгружатьДвижения)
	
	ВременныйФайл = ПолучитьИмяВременногоФайла(".xml");
	Файл = Новый Файл(ВременныйФайл);
	_ИмяФайлаВыгрузки = ВременныйФайл;
	
	// Получить Объект Метаданных
	_ОбъектМетаданных = Метаданные.НайтиПоТипу(_ТипПоля);
	
	Если _ОбъектМетаданных = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;     
	
	ПолноеИмяОбъекта = _ОбъектМетаданных.ПолноеИмя();
	
	ПозицияРазделителя = Найти(ПолноеИмяОбъекта, ".");
	
	_ИмяОбъектаМетаданных = Сред(ПолноеИмяОбъекта, ПозицияРазделителя + 1);
	_ТипОбъектаМетаданных = Сред(ПолноеИмяОбъекта, 1, ПозицияРазделителя - 1);
	
	_ЭтоДокумент = ?(_ТипОбъектаМетаданных = "Документ", Истина, Ложь);
	
	// Выполнить выгрузку
	ВыгрузкаЗавершена = НачатьВыгрузку(_ИмяФайлаВыгрузки, _ПолеВыгрузки, _ИмяОбъектаМетаданных, _ТипОбъектаМетаданных, _ВыгружатьДвижения, _ЭтоДокумент);
	
	АдресФайла = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(_ИмяФайлаВыгрузки), ЭтаФорма.УникальныйИдентификатор);
	УдалитьФайлы(_ИмяФайлаВыгрузки);
	
	Если Не ВыгрузкаЗавершена Тогда
		
		Сообщить("Ошибка создания файла.");
		
	КонецЕсли;
	
	Возврат ВыгрузкаЗавершена;
	
КонецФункции

&НаСервере
Функция НачатьВыгрузку(_ИмяФайлаВыгрузки, _ПолеВыгрузки, _ИмяОбъектаМетаданных, _ТипОбъектаМетаданных, _ВыгружатьДвижения, _ЭтоДокумент)
	
	мЗаписьXML = Новый ЗаписьXML;
	
	мЗаписьXML.ОткрытьФайл(_ИмяФайлаВыгрузки, "UTF-8");
	мЗаписьXML.ЗаписатьОбъявлениеXML();
	мЗаписьXML.ЗаписатьНачалоЭлемента("Root");
	мЗаписьXML.ЗаписатьНачалоАтрибута(_ТипОбъектаМетаданных);
	мЗаписьXML.ЗаписатьТекст(_ИмяОбъектаМетаданных);
	мЗаписьXML.ЗаписатьКонецАтрибута();
	
	ОбходДерева_При_Выгрузке(РезультатЗапроса.ПолучитьЭлементы(), мЗаписьXML, _ПолеВыгрузки, _ВыгружатьДвижения, _ЭтоДокумент);
	
	мЗаписьXML.ЗаписатьКонецЭлемента();
	мЗаписьXML.Закрыть(); 
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОбходДерева_При_Выгрузке(Строки, мЗаписьXML, _ПолеВыгрузки, _ВыгружатьДвижения, _ЭтоДокумент)
	
	Для Каждого Строка из Строки Цикл 
		
		Попытка
			Объект = Строка[_ПолеВыгрузки].ПолучитьОбъект();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
		ЗаписатьXML(мЗаписьXML, Объект, НазначениеТипаXML.Явное);
		
		Если _ЭтоДокумент И _ВыгружатьДвижения Тогда
			Для Каждого Движение Из Объект.Движения Цикл
				Движение.Прочитать();
				
				ЗаписатьXML(мЗаписьXML, Движение, НазначениеТипаXML.Явное);
			КонецЦикла;			
		КонецЕсли;
		
		ОбходДерева_При_Выгрузке(Строка.ПолучитьЭлементы(), мЗаписьXML, _ПолеВыгрузки, _ВыгружатьДвижения, _ЭтоДокумент);
		
	КонецЦикла;  	
	
КонецПроцедуры

// Выгрузить регистр...
&НаКлиенте
Процедура кпВыгрузитьРегистр(Команда)
	
	Если РезультатЗапроса.ПолучитьЭлементы().Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ОповещениеОВыборе = Новый ОписаниеОповещения("ПолучитьРегистр_ВыгрузитьРегистр", ЭтотОбъект);
	ОткрытьФорму("ВнешняяОбработка.КонсольЗапросов.Форма.ДеревоМетаданных",,,,,,ОповещениеОВыборе);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьРегистр_ВыгрузитьРегистр(Результат, ДополнительныеПараметры) Экспорт
	
	Перем АдресФайла; 
	
	Если Результат <> Неопределено Тогда
		
		// выбрать путь для выгрузки
		ПутьВыгрузки = "";
		Режим = РежимДиалогаВыбораФайла.Сохранение;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		ДиалогОткрытияФайла.Заголовок = "Выберите каталог для выгрузки";
		
		ДиалогОткрытияФайла.Фильтр = "(*.xml)|*.xml";
		ДиалогОткрытияФайла.Расширение = "xml";
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			Каталог = ?(ДиалогОткрытияФайла.Каталог <> Неопределено, ДиалогОткрытияФайла.Каталог, ПутьВыгрузки);
		Иначе
			Возврат;
		КонецЕсли;
		ПутьВыгрузки = ДиалогОткрытияФайла.ПолноеИмяФайла;
		
		// не выбрали путь для выгрузки
		Если Не ЗначениеЗаполнено(Каталог) Тогда
			Сообщить("Не выбран путь выгрузки!");
			Возврат;
		КонецЕсли;
		
		Состояние(Нстр("ru='Выполняется выгрузка объекта конфигурации. Пожалуйста, подождите...'"));
		Если ВыполнитьВыгрузкуРегистраНаСервере(АдресФайла, Результат) Тогда 		
			Сообщить("Выгрузка успешно завершена.");  		
			ПолучитьФайл(АдресФайла, ПутьВыгрузки, Ложь);  		
		Иначе
			Сообщить("Выгрузка не завершена.");
		КонецЕсли; 				
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция ВыполнитьВыгрузкуРегистраНаСервере(АдресФайла, _ПолученныйРегистр)
	
	ВременныйФайл = ПолучитьИмяВременногоФайла(".xml");
	Файл = Новый Файл(ВременныйФайл);
	_ИмяФайлаВыгрузки = ВременныйФайл;
	
	// Выполнить выгрузку
	ВыгрузкаЗавершена = Выгрузить_ВыгрузитьРегистр_Сервер(_ИмяФайлаВыгрузки, _ПолученныйРегистр);
	
	Если ВыгрузкаЗавершена Тогда
		АдресФайла = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(_ИмяФайлаВыгрузки), ЭтаФорма.УникальныйИдентификатор);
	Иначе   		
		Сообщить("Ошибка создания файла.");		
	КонецЕсли;
	
	УдалитьФайлы(_ИмяФайлаВыгрузки);
	
	Возврат ВыгрузкаЗавершена;
	
КонецФункции

&НаСервере
Функция Выгрузить_ВыгрузитьРегистр_Сервер(_ИмяФайлаВыгрузки, _ПолученныйРегистр) 
	
	НаборЗаписей = Вычислить(_ПолученныйРегистр.ИмяМенеджера).СоздатьНаборЗаписей();
	
	ОтборРегистра = НаборЗаписей.Отбор;
	
	Если НЕ ПроверитьОтборРегистра(ОтборРегистра) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	мЗаписьXML = Новый ЗаписьXML;
	
	мЗаписьXML.ОткрытьФайл(_ИмяФайлаВыгрузки, "UTF-8");
	мЗаписьXML.ЗаписатьОбъявлениеXML();
	мЗаписьXML.ЗаписатьНачалоЭлемента("Root");
	
	ОбходДерева_При_ВыгрузитьРегистр(РезультатЗапроса.ПолучитьЭлементы(), мЗаписьXML, НаборЗаписей, ОтборРегистра);
	
	мЗаписьXML.ЗаписатьКонецЭлемента();
	мЗаписьXML.Закрыть();
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОбходДерева_При_ВыгрузитьРегистр(Строки, мЗаписьXML, _НаборЗаписей, _ОтборРегистра)
	
	Для Каждого Строка из Строки Цикл 
		
		Для Каждого поле Из _ОтборРегистра Цикл
			_НаборЗаписей.Отбор[поле.Имя].Установить(Строка[поле.Имя]);
		КонецЦикла;
		
		Попытка
			_НаборЗаписей.Прочитать();
			ЗаписатьXML(мЗаписьXML, _НаборЗаписей, НазначениеТипаXML.Явное);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
		ОбходДерева_При_ВыгрузитьРегистр(Строка.ПолучитьЭлементы(), мЗаписьXML, _НаборЗаписей, _ОтборРегистра)
		
	КонецЦикла;
	
КонецПроцедуры

//Загрузить...
&НаКлиенте
Процедура кпЗагрузить(Команда)
	
	Перем АдресФайла; 
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Заголовок = "Выберите файл";
	ДиалогОткрытияФайла.Фильтр = "(*.xml)|*.xml";
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		_ПутьЗагрузки = ДиалогОткрытияФайла.ВыбранныеФайлы[0];
	Иначе
		Возврат;
	КонецЕсли;
	
	// проверка корректности пути к файлу
	Если _ПутьЗагрузки = Неопределено Тогда Возврат КонецЕсли;
	Файл = Новый Файл(_ПутьЗагрузки);
	Если НЕ Файл.Существует() Тогда
		Сообщить ("Файл не может быть открыт по указанному пути: " + _ПутьЗагрузки);
		Возврат;
	КонецЕсли;  	
	
	АдресФайла = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(_ПутьЗагрузки), ЭтаФорма.УникальныйИдентификатор);
	
	ПоказатьВопрос(Новый ОписаниеОповещения("Загрузить_АвторегистрацииПлановОбмена", ЭтотОбъект, Новый Структура("АдресФайла, ИмяФайла", АдресФайла, ДиалогОткрытияФайла.ПолноеИмяФайла)), "Регистрировать загружаемые данные по настройкам авторегистрации планов обмена?", РежимДиалогаВопрос.ДаНетОтмена); 
	
КонецПроцедуры

&НаКлиенте
Процедура Загрузить_АвторегистрацииПлановОбмена(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗагрузитьДанные(ДополнительныеПараметры.АдресФайла, Истина);
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда 	
		ЗагрузитьДанные(ДополнительныеПараметры.АдресФайла, Ложь);
	ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда
		Сообщить("Отмена загрузки файла: " + ДополнительныеПараметры.ИмяФайла);
		Возврат; 
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанные(АдресФайла, булРегистрироватьНаОбмен)
	
	ПутьКФайлу = ПолучитьИмяВременногоФайла("xml");
	БинарныеДанные = ПолучитьИзВременногоХранилища(АдресФайла); 
	БинарныеДанные.Записать(ПутьКФайлу);
	
	НовоеЧтениеXML = Новый ЧтениеXML;	
	НовоеЧтениеXML.ОткрытьФайл(ПутьКФайлу);
	
	Пока НовоеЧтениеXML.Прочитать() Цикл
		
		Пока ВозможностьЧтенияXML(НовоеЧтениеXML) Цикл
			
			_ОбъектЗагрузки = ПрочитатьXML(НовоеЧтениеXML);
			
			Попытка
				_ОбъектЗагрузки.ОбменДанными.Загрузка = Истина;
				
				Если НЕ булРегистрироватьНаОбмен Тогда
					_ОбъектЗагрузки.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
					_ОбъектЗагрузки.ОбменДанными.Получатели.Очистить();					
				КонецЕсли;
				
				_ОбъектЗагрузки.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Настройки_Вывода

&НаКлиенте
Процедура ПолучитьИзЗапроса(Команда)
	
	ТекущиеДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		
		Если ТекущиеДанные.ЯвляетсяЗапросом Тогда
			Запрос_Текст = Элементы.ДеревоЗапросовТекстЗапроса.ВыделенныйТекст;
			Если СтрДлина(Запрос_Текст) <> 0 Тогда
				Запрос_Текст = Запрос_Текст;
			Иначе
				Запрос_Текст = ТекущиеДанные.ТекстЗапроса;
			КонецЕсли; 			
		Иначе
			Запрос_Текст = ТекущиеДанные.ТекстЗапроса;
		КонецЕсли;
		
		ПолучитьИзЗапросаСервер(Запрос_Текст, СоответсвияВывода, СоответствиеМетаданных);
		
	КонецЕсли; 	
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьИзЗапросаСервер(Запрос_Текст, СоответсвияВывода, СоответствиеМетаданных)
	
	Если ПустаяСтрока(Запрос_Текст) Тогда Возврат КонецЕсли;
	ВремПостроитель = Новый ПостроительЗапроса;
	Попытка
		ВремПостроитель.Текст = Запрос_Текст;
	Исключение
		ПараметрыВывода.Очистить();
		Возврат;
	КонецПопытки;
	ВремПостроитель.ЗаполнитьНастройки();
	
	ПараметрыВывода.Очистить();
	Для Каждого Колонка Из ВремПостроитель.ДоступныеПоля Цикл
		НовСтрока = ПараметрыВывода.Добавить();
		НовСтрока.ИмяПараметра = Колонка.Имя;
		Если Найти(ВРег(Колонка.Представление), "GUID") Тогда НовСтрока.Использовать = Истина; НовСтрока.ЗначениеПараметра = 1 КонецЕсли;
		Если Найти(ВРег(Колонка.Представление), "BINARY") Тогда НовСтрока.Использовать = Истина; НовСтрока.ЗначениеПараметра = 2 КонецЕсли;
	КонецЦикла;	
	
	ЗаполнитьСоответствияВывода(СоответсвияВывода, СоответствиеМетаданных);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыВыводаИспользоватьПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	ТекущиеДанные.ЗначениеПараметра = ?(ТекущиеДанные.Использовать, Макс(ТекущиеДанные.ЗначениеПараметра, "ГУИД ссылки"), ТекущиеДанные.ЗначениеПараметра);
	ЗаполнитьСоответствияВывода(СоответсвияВывода, СоответствиеМетаданных);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыВыводаЗначениеПараметраПриИзменении(Элемент)
	ЗаполнитьСоответствияВывода(СоответсвияВывода, СоответствиеМетаданных);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоответствияВывода(СоответсвияВывода, СоответствиеМетаданных)
	
	СоответсвияВывода.Очистить();
	МассивПараметры = ПараметрыВывода.НайтиСтроки(Новый Структура("Использовать", Истина));
	Для Каждого Строка Из МассивПараметры Цикл
		СоответсвияВывода.Вставить(Строка.ИмяПараметра, Строка.ЗначениеПараметра);
	КонецЦикла;	
	
	Для Каждого Строка Из ПараметрыВывода Цикл
		Если СоответствиеМетаданных.Получить(Строка.ИмяПараметра)=Неопределено Тогда
			СоответствиеМетаданных.Вставить(Строка.ИмяПараметра);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти














